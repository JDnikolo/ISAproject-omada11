[
    {
        "id": "bd98b29aaa90f179",
        "type": "tab",
        "label": "TH parsing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9ee86d73a3beeb1e",
        "type": "tab",
        "label": "HVAC Parsing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "57bf023b6cc4f8a0",
        "type": "tab",
        "label": "MiAC Parsing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e18913d54fad356d",
        "type": "tab",
        "label": "Water Parsing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5e9c111b6bd7229e",
        "type": "tab",
        "label": "Movement Parsing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "307fd7ad0d937d18",
        "type": "tab",
        "label": "Etot parsing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "23fc6784401a0cff",
        "type": "tab",
        "label": "Wtot parsing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5ff96d6be0bced20",
        "type": "tab",
        "label": "Slack Slash Commands",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fe78548ad9d34539",
        "type": "mqtt-broker",
        "name": "mqtt",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "28bf60a032e41c72",
        "type": "MySQLdatabase",
        "name": "iot_home",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "iot_home",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "bf796bdec8a4e523",
        "type": "mqtt in",
        "z": "bd98b29aaa90f179",
        "name": "TH*",
        "topic": "/home/15min/TH/#",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fe78548ad9d34539",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 220,
        "wires": [
            [
                "799e267ae394db46"
            ]
        ]
    },
    {
        "id": "c6f0482b8e3eabe5",
        "type": "debug",
        "z": "bd98b29aaa90f179",
        "name": "parsed payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 120,
        "wires": []
    },
    {
        "id": "799e267ae394db46",
        "type": "function",
        "z": "bd98b29aaa90f179",
        "name": "parse data",
        "func": "const items = msg.payload.split(\"|\");\nconst date = new Date(items[0]);\nconst value = parseFloat(items[1]);\nconst device = msg.topic.split(\"/\")[4];\nlet on_off = global.get('on_off');\nif (!on_off[device]) {\n    return null;\n}\nconst startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\nconst startOfYesterday = new Date();\nstartOfYesterday.setDate(startOfYesterday.getDate()-1)\nstartOfYesterday.setHours(0, 0, 0, 0);\nmsg.payload={\"dtime\":date,\n    \"device\":device,\n    \"reading\":value,\n    \"startOfDay\":startOfDay,\n    \"startOfYesterday\":startOfYesterday}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 220,
        "wires": [
            [
                "c6f0482b8e3eabe5",
                "1469ad8aaf09ab5a"
            ]
        ]
    },
    {
        "id": "8afc646fa6ead3ea",
        "type": "function",
        "z": "bd98b29aaa90f179",
        "name": "insert raw data",
        "func": "const data = msg.payload;\nmsg.payload = [data.dtime, data.device, data.reading];\nmsg.topic = \"INSERT INTO TH(dtime, device, reading) VALUES ( ?, ?, ?);\" ;\nlet last_reading = global.get('last_reading');\nlast_reading[data.device] = data.reading;\nglobal.set('last_reading', last_reading);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 140,
        "wires": [
            [
                "2230ddd0889bf4ea"
            ]
        ]
    },
    {
        "id": "2230ddd0889bf4ea",
        "type": "mysql",
        "z": "bd98b29aaa90f179",
        "mydb": "28bf60a032e41c72",
        "name": "db",
        "x": 850,
        "y": 120,
        "wires": [
            [
                "469c376d089224a7"
            ]
        ]
    },
    {
        "id": "469c376d089224a7",
        "type": "debug",
        "z": "bd98b29aaa90f179",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 60,
        "wires": []
    },
    {
        "id": "1469ad8aaf09ab5a",
        "type": "switch",
        "z": "bd98b29aaa90f179",
        "name": "check if late",
        "property": "payload.dtime",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "payload.startOfDay",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "payload.startOfYesterday",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 410,
        "y": 420,
        "wires": [
            [
                "8afc646fa6ead3ea",
                "03f7c7f2ef7e7a69"
            ],
            [
                "fbd63efd1dabc01b"
            ],
            [
                "0e38fc0a40191afe"
            ]
        ],
        "outputLabels": [
            "not late",
            "late agg",
            "too late"
        ]
    },
    {
        "id": "fbd63efd1dabc01b",
        "type": "debug",
        "z": "bd98b29aaa90f179",
        "name": "late agg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 540,
        "wires": []
    },
    {
        "id": "0e38fc0a40191afe",
        "type": "debug",
        "z": "bd98b29aaa90f179",
        "name": "too late",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 600,
        "wires": []
    },
    {
        "id": "03f7c7f2ef7e7a69",
        "type": "function",
        "z": "bd98b29aaa90f179",
        "name": "aggregation",
        "func": "const data = msg.payload;\nconst curr_device = data.device;\nif (!context.th[curr_device]) {\n    const date = data.dtime;\n    date.setHours(0,0,0,0);\n    context.th[curr_device] = {\n        \"dtime\": date,\n        \"freq\": 0.0,\n        \"sum\": 0.0  \n    };\n}\n\nif (context.th[curr_device].dtime.getDate() != data.dtime.getDate()) {\n    msg.payload = {};\n    msg.payload.dtime = context.th[curr_device].dtime;\n    msg.payload.curr_device =  curr_device;\n    msg.payload.sum = context.th[curr_device].sum / context.th[curr_device].freq;\n    msg.topic = \"INSERT INTO THAvgDay(dtime, device, day_avg) VALUES(:dtime, :curr_device, :sum);\";\n    const date = data.dtime;\n    date.setHours(0, 0, 0, 0);\n    context.th[curr_device].dtime = date;\n    context.th[curr_device].freq = 1.0;\n    context.th[curr_device].sum = data.reading;\n    return msg;\n}\n\ncontext.th[curr_device].freq += 1.0;\ncontext.th[curr_device].sum += data.reading;\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.th = {};",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 320,
        "wires": [
            [
                "2230ddd0889bf4ea",
                "2e9594b62f54dede"
            ]
        ]
    },
    {
        "id": "20113d783c5d668a",
        "type": "http request",
        "z": "bd98b29aaa90f179",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://slack.com/api/chat.postMessage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1130,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "2e9594b62f54dede",
        "type": "function",
        "z": "bd98b29aaa90f179",
        "name": "prepare request",
        "func": "if (!msg) {\n    return null;\n}\nconst SLACK_TOKEN = env.get(\"SLACK_TOKEN\");\nconst CHANNEL_ID = env.get(\"SLACK_AGGREGATIONS_CHANNEL\");\nconst data = msg.payload;\nlet dtime = data.dtime;\nvar options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'};\ndtime = dtime.toLocaleDateString(undefined, options)\nlet device_type = \"Temperature (Â°C)\";\nlet aggregation_type = \"Average\";\nlet aggregation = data.sum.toFixed(2).toLocaleString();\nlet curr_device = data.curr_device;\nlet blocks = [\n    {\n        \"type\": \"section\",\n        \"text\": {\n            \"text\": `*${device_type}*`,\n            \"type\": \"mrkdwn\"\n        },\n        \"fields\": [\n            {\n                \"type\": \"mrkdwn\",\n                \"text\": `Device: ${curr_device}\\nDate: ${dtime}\\n${aggregation_type}: ${aggregation}\\n\\n`\n        }\n        ]\n    }\n]\nmsg.headers = {\n    \"Authorization\": `Bearer ${SLACK_TOKEN}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n};\nmsg.payload = {\n    \"channel\": CHANNEL_ID,\n    \"blocks\": blocks\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 320,
        "wires": [
            [
                "20113d783c5d668a"
            ]
        ]
    },
    {
        "id": "b1d0bd343bb92764",
        "type": "mqtt in",
        "z": "9ee86d73a3beeb1e",
        "name": "HVAC*",
        "topic": "/home/15min/HVAC/#",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fe78548ad9d34539",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 240,
        "wires": [
            [
                "3a6a9489575b7437"
            ]
        ]
    },
    {
        "id": "34aeb6a87c05bf1e",
        "type": "debug",
        "z": "9ee86d73a3beeb1e",
        "name": "parsed payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 140,
        "wires": []
    },
    {
        "id": "3a6a9489575b7437",
        "type": "function",
        "z": "9ee86d73a3beeb1e",
        "name": "parse data",
        "func": "const items = msg.payload.split(\"|\");\nconst date = new Date(items[0]);\nconst value = parseInt(items[1]);\nconst device = msg.topic.split(\"/\")[4];\nlet on_off = global.get('on_off');\nif (!on_off[device]) {\n    return null;\n}\nconst startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\nconst startOfYesterday = new Date();\nstartOfYesterday.setDate(startOfYesterday.getDate()-1)\nstartOfYesterday.setHours(0, 0, 0, 0);\nmsg.payload={\"dtime\":date,\n    \"device\":device,\n    \"reading\":value,\n    \"startOfDay\":startOfDay,\n    \"startOfYesterday\":startOfYesterday}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 240,
        "wires": [
            [
                "34aeb6a87c05bf1e",
                "5604d3b95b3e613f"
            ]
        ]
    },
    {
        "id": "f3f783dbd7ba8a43",
        "type": "function",
        "z": "9ee86d73a3beeb1e",
        "name": "insert raw data",
        "func": "const data = msg.payload;\nmsg.payload = [data.dtime, data.device, data.reading];\nmsg.topic = \"INSERT INTO HVAC(dtime, device, reading) VALUES ( ?, ?, ?);\" ;\nlet last_reading = global.get('last_reading');\nlast_reading[data.device] = data.reading;\nglobal.set('last_reading', last_reading);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 160,
        "wires": [
            [
                "e98c94e5426db923"
            ]
        ]
    },
    {
        "id": "e98c94e5426db923",
        "type": "mysql",
        "z": "9ee86d73a3beeb1e",
        "mydb": "28bf60a032e41c72",
        "name": "db",
        "x": 870,
        "y": 140,
        "wires": [
            [
                "babd4ed299c3c4d2"
            ]
        ]
    },
    {
        "id": "babd4ed299c3c4d2",
        "type": "debug",
        "z": "9ee86d73a3beeb1e",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 80,
        "wires": []
    },
    {
        "id": "5604d3b95b3e613f",
        "type": "switch",
        "z": "9ee86d73a3beeb1e",
        "name": "check if late",
        "property": "payload.dtime",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "payload.startOfDay",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "payload.startOfYesterday",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 430,
        "y": 440,
        "wires": [
            [
                "f3f783dbd7ba8a43",
                "64fee8ee62cffb7c"
            ],
            [
                "20fe10e04bd6b5e7"
            ],
            [
                "0e5dac2b8d51dd9d"
            ]
        ],
        "outputLabels": [
            "not late",
            "late agg",
            "too late"
        ]
    },
    {
        "id": "20fe10e04bd6b5e7",
        "type": "debug",
        "z": "9ee86d73a3beeb1e",
        "name": "late agg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 560,
        "wires": []
    },
    {
        "id": "0e5dac2b8d51dd9d",
        "type": "debug",
        "z": "9ee86d73a3beeb1e",
        "name": "too late",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 620,
        "wires": []
    },
    {
        "id": "64fee8ee62cffb7c",
        "type": "function",
        "z": "9ee86d73a3beeb1e",
        "name": "aggregation",
        "func": "const data = msg.payload;\nconst curr_device = data.device;\n\nif (!context.hvac[curr_device]) {\n    const date = data.dtime;\n    date.setHours(0,0,0,0);\n    context.hvac[curr_device] = {\n        \"dtime\": date,\n        \"sum\": 0\n    };\n}\n\nif (context.hvac[curr_device].dtime.getDate() != data.dtime.getDate()) {\n    msg.payload = [context.hvac[curr_device].dtime, curr_device, context.hvac[curr_device].sum];\n    msg.payload = {};\n    msg.payload.dtime = context.hvac[curr_device].dtime;\n    msg.payload.curr_device = curr_device;\n    msg.payload.sum = context.hvac[curr_device].sum;\n    msg.topic = \"INSERT INTO HVACSumDay(dtime, device, day_sum) VALUES(:dtime, :curr_device, :sum);\";\n    global.set(\"last_hvac_sum\", global.get(\"last_hvac_sum\")+context.hvac[curr_device].sum);\n    const date = data.dtime;\n    date.setHours(0, 0, 0, 0);\n    context.hvac[curr_device].dtime = date;\n    context.hvac[curr_device].sum = data.reading;\n    return msg;\n}\ncontext.hvac[curr_device].sum += data.reading;\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.hvac = {};",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 380,
        "wires": [
            [
                "e98c94e5426db923",
                "c4e258b7d3d45237"
            ]
        ]
    },
    {
        "id": "a2b7af16ce0e4f44",
        "type": "http request",
        "z": "9ee86d73a3beeb1e",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://slack.com/api/chat.postMessage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1130,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "c4e258b7d3d45237",
        "type": "function",
        "z": "9ee86d73a3beeb1e",
        "name": "prepare request",
        "func": "if (!msg) {\n    return null;\n}\nconst SLACK_TOKEN = env.get(\"SLACK_TOKEN\");\nconst CHANNEL_ID = env.get(\"SLACK_AGGREGATIONS_CHANNEL\");\nconst data = msg.payload;\nlet dtime = data.dtime;\nvar options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\ndtime = dtime.toLocaleDateString(undefined, options)\nlet device_type = \"Air Condition Power Consumption (W)\";\nlet aggregation_type = \"Daily Summary\";\nlet aggregation = data.sum.toLocaleString();\nlet curr_device = data.curr_device;\nlet blocks = [\n    {\n        \"type\": \"section\",\n        \"text\": {\n            \"text\": `*${device_type}*`,\n            \"type\": \"mrkdwn\"\n        },\n        \"fields\": [\n            {\n                \"type\": \"mrkdwn\",\n                \"text\": `Device: ${curr_device}\\nDate: ${dtime}\\n${aggregation_type}: ${aggregation}\\n\\n`\n            }\n        ]\n    }\n]\nmsg.headers = {\n    \"Authorization\": `Bearer ${SLACK_TOKEN}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n};\nmsg.payload = {\n    \"channel\": CHANNEL_ID,\n    \"blocks\": blocks\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 380,
        "wires": [
            [
                "a2b7af16ce0e4f44"
            ]
        ]
    },
    {
        "id": "b2334e6f8392896e",
        "type": "mqtt in",
        "z": "57bf023b6cc4f8a0",
        "name": "MiAC*",
        "topic": "/home/15min/MiAC/#",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fe78548ad9d34539",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 280,
        "wires": [
            [
                "9a6c4a04599d0a88"
            ]
        ]
    },
    {
        "id": "6d4246d34b9f11b1",
        "type": "debug",
        "z": "57bf023b6cc4f8a0",
        "name": "parsed payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 180,
        "wires": []
    },
    {
        "id": "9a6c4a04599d0a88",
        "type": "function",
        "z": "57bf023b6cc4f8a0",
        "name": "parse data",
        "func": "const items = msg.payload.split(\"|\");\nconst date = new Date(items[0]);\nconst value = parseInt(items[1]);\nconst device = msg.topic.split(\"/\")[4];\nlet on_off = global.get('on_off');\nif (!on_off[device]) {\n    return null;\n}\nconst startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\nconst startOfYesterday = new Date();\nstartOfYesterday.setDate(startOfYesterday.getDate()-1)\nstartOfYesterday.setHours(0, 0, 0, 0);\nmsg.payload={\"dtime\":date,\n    \"device\":device,\n    \"reading\":value,\n    \"startOfDay\":startOfDay,\n    \"startOfYesterday\":startOfYesterday}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 280,
        "wires": [
            [
                "6d4246d34b9f11b1",
                "8bec2f985843e49f"
            ]
        ]
    },
    {
        "id": "2c8ce9e2a2b07e15",
        "type": "function",
        "z": "57bf023b6cc4f8a0",
        "name": "insert raw data",
        "func": "const data = msg.payload;\nmsg.payload = [data.dtime, data.device, data.reading];\nglobal.set('last_miac', data.reading);\nmsg.topic = \"INSERT INTO MiAC(dtime, device, reading) VALUES ( ?, ?, ?);\" ;\nlet last_reading = global.get('last_reading');\nlast_reading[data.device] = data.reading;\nglobal.set('last_reading', last_reading);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 200,
        "wires": [
            [
                "306ed77f5bfef105"
            ]
        ]
    },
    {
        "id": "306ed77f5bfef105",
        "type": "mysql",
        "z": "57bf023b6cc4f8a0",
        "mydb": "28bf60a032e41c72",
        "name": "db",
        "x": 890,
        "y": 180,
        "wires": [
            [
                "12d3761ef7859519"
            ]
        ]
    },
    {
        "id": "12d3761ef7859519",
        "type": "debug",
        "z": "57bf023b6cc4f8a0",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 120,
        "wires": []
    },
    {
        "id": "8bec2f985843e49f",
        "type": "switch",
        "z": "57bf023b6cc4f8a0",
        "name": "check if late",
        "property": "payload.dtime",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "payload.startOfDay",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "payload.startOfYesterday",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 450,
        "y": 480,
        "wires": [
            [
                "2c8ce9e2a2b07e15",
                "5c6d43d2b7cb8689"
            ],
            [
                "2c34642d5f4520aa"
            ],
            [
                "64fe049ef2b5c3fc"
            ]
        ],
        "outputLabels": [
            "not late",
            "late agg",
            "too late"
        ]
    },
    {
        "id": "2c34642d5f4520aa",
        "type": "debug",
        "z": "57bf023b6cc4f8a0",
        "name": "late agg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 600,
        "wires": []
    },
    {
        "id": "64fe049ef2b5c3fc",
        "type": "debug",
        "z": "57bf023b6cc4f8a0",
        "name": "too late",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 660,
        "wires": []
    },
    {
        "id": "5c6d43d2b7cb8689",
        "type": "function",
        "z": "57bf023b6cc4f8a0",
        "name": "aggregation",
        "func": "const data = msg.payload;\nconst curr_device = data.device;\nif (!context.miac[curr_device]) {\n    const date = data.dtime;\n    date.setHours(0,0,0,0);\n    context.miac[curr_device] = {\n        \"dtime\": date,\n        \"sum\": 0\n    };\n}\n\nif (context.miac[curr_device].dtime.getDate() != data.dtime.getDate()) {\n    msg.payload = {};\n    msg.payload.dtime = context.miac[curr_device].dtime;\n    msg.payload.curr_device = curr_device;\n    msg.payload.sum = context.miac[curr_device].sum;\n    msg.topic = \"INSERT INTO MIACSumDay(dtime, device, day_sum) VALUES(:dtime, :curr_device, :sum);\";\n    global.set(\"last_miac_sum\", global.get(\"last_miac_sum\") + context.miac[curr_device].sum);\n    const date = data.dtime;\n    date.setHours(0, 0, 0, 0);\n    context.miac[curr_device].dtime = date;\n    context.miac[curr_device].sum = data.reading;\n    return msg;\n}\n\ncontext.miac[curr_device].sum += data.reading;\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.miac = {};",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 400,
        "wires": [
            [
                "306ed77f5bfef105",
                "7fa00c9d82aa1d50"
            ]
        ]
    },
    {
        "id": "ebc52eec0753dccd",
        "type": "http request",
        "z": "57bf023b6cc4f8a0",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://slack.com/api/chat.postMessage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1150,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "7fa00c9d82aa1d50",
        "type": "function",
        "z": "57bf023b6cc4f8a0",
        "name": "prepare request",
        "func": "if (!msg) {\n    return null;\n}\nconst SLACK_TOKEN = env.get(\"SLACK_TOKEN\");\nconst CHANNEL_ID = env.get(\"SLACK_AGGREGATIONS_CHANNEL\");\nconst data = msg.payload;\nlet dtime = data.dtime;\nvar options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\ndtime = dtime.toLocaleDateString(undefined, options)\nlet device_type = \"Miscellaneous Power Consumption (W)\"\nlet aggregation_type = \"Daily Summary\";\nlet aggregation = data.sum.toLocaleString();\nlet curr_device = data.curr_device;\nlet blocks = [\n    {\n        \"type\": \"section\",\n        \"text\": {\n            \"text\": `*${device_type}*`,\n            \"type\": \"mrkdwn\"\n        },\n        \"fields\": [\n            {\n                \"type\": \"mrkdwn\",\n                \"text\": `Device: ${curr_device}\\nDate: ${dtime}\\n${aggregation_type}: ${aggregation}\\n\\n`\n            }\n        ]\n    }\n]\nmsg.headers = {\n    \"Authorization\": `Bearer ${SLACK_TOKEN}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n};\nmsg.payload = {\n    \"channel\": CHANNEL_ID,\n    \"blocks\": blocks\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 400,
        "wires": [
            [
                "ebc52eec0753dccd"
            ]
        ]
    },
    {
        "id": "4289d870c48f3671",
        "type": "debug",
        "z": "e18913d54fad356d",
        "name": "parsed payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 140,
        "wires": []
    },
    {
        "id": "bfafe9b9e7c3bd90",
        "type": "function",
        "z": "e18913d54fad356d",
        "name": "insert raw data",
        "func": "const data = msg.payload;\nmsg.payload = [data.dtime, data.device, data.reading];\nmsg.topic = \"INSERT INTO Water(dtime, device, reading) VALUES ( ?, ?, ?);\" ;\nlet last_reading = global.get('last_reading');\nlast_reading[data.device] = data.reading;\nglobal.set('last_reading', last_reading);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 160,
        "wires": [
            [
                "a9221f34f677b4ec"
            ]
        ]
    },
    {
        "id": "a9221f34f677b4ec",
        "type": "mysql",
        "z": "e18913d54fad356d",
        "mydb": "28bf60a032e41c72",
        "name": "db",
        "x": 950,
        "y": 140,
        "wires": [
            [
                "be0fdbc60539ba59"
            ]
        ]
    },
    {
        "id": "be0fdbc60539ba59",
        "type": "debug",
        "z": "e18913d54fad356d",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 80,
        "wires": []
    },
    {
        "id": "fe6e8001da2446bc",
        "type": "switch",
        "z": "e18913d54fad356d",
        "name": "check if late",
        "property": "payload.dtime",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "payload.startOfDay",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "payload.startOfYesterday",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 490,
        "y": 440,
        "wires": [
            [
                "bfafe9b9e7c3bd90",
                "42edbe479b4255b6"
            ],
            [
                "ac82d2eb4646888b"
            ],
            [
                "9bde522ec5736596"
            ]
        ],
        "outputLabels": [
            "not late",
            "late agg",
            "too late"
        ]
    },
    {
        "id": "9bde522ec5736596",
        "type": "function",
        "z": "e18913d54fad356d",
        "name": "insert rejected",
        "func": "const data = msg.payload;\n\nmsg.payload = {};\nmsg.payload.dtime = data.dtime;\nmsg.payload.device = data.device;\nmsg.payload.reading = data.reading;\nmsg.payload.arrival_status = 'rejected';\nmsg.payload.dtime_received = data.startOfDay;\nmsg.topic = \"INSERT INTO Water(dtime, device, reading, arrival_status) VALUES ( :dtime, :device, :reading, :arrival_status); \" +\n\"INSERT INTO RejectedEvents(dtime_event, dtime_received, device, reading) VALUES (:dtime, :dtime_received, :device, :reading)\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 762,
        "y": 629,
        "wires": [
            [
                "a9221f34f677b4ec"
            ]
        ]
    },
    {
        "id": "42edbe479b4255b6",
        "type": "function",
        "z": "e18913d54fad356d",
        "name": "aggregation",
        "func": "const data = msg.payload;\nconst curr_device = data.device;\n\nif (!context.water[curr_device]) {\n    const date = new Date(data.dtime.getTime());\n    date.setHours(0, 0, 0, 0);\n    context.water[curr_device] = {\n        \"dtime\": date,\n        \"sum\": 0.0\n    };\n}\n\nif (context.water[curr_device].dtime.getDate() != data.dtime.getDate()) {\n    msg.payload = {};\n    msg.payload.dtime = context.water[curr_device].dtime;\n    msg.payload.curr_device = curr_device;\n    msg.payload.sum = context.water[curr_device].sum;\n    msg.topic = \"INSERT INTO WaterSumDay(dtime, device, day_sum) VALUES(:dtime, :curr_device, :sum);\";\n    global.set(\"last_w_sum\", global.get(\"last_w_sum\") + context.water[curr_device].sum);\n    global.yesterdayWater[curr_device] = { ...context.water[curr_device] };\n    const date = data.dtime;\n    date.setHours(0, 0, 0, 0);\n    context.water[curr_device].dtime = new Date(date.getTime());\n    context.water[curr_device].sum = data.reading;\n    return msg;\n}\n\ncontext.water[curr_device].sum += data.reading;\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.water = {};\nif (!global.yesterdayWater) {\n    global.yesterdayWater = {};\n}",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 380,
        "wires": [
            [
                "a9221f34f677b4ec",
                "6a570a08ddae4555"
            ]
        ]
    },
    {
        "id": "1993b87ab1a230e1",
        "type": "http request",
        "z": "e18913d54fad356d",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://slack.com/api/chat.postMessage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1210,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "6a570a08ddae4555",
        "type": "function",
        "z": "e18913d54fad356d",
        "name": "prepare request",
        "func": "if (!msg) {\n    return null;\n}\nconst SLACK_TOKEN = env.get(\"SLACK_TOKEN\");\nconst CHANNEL_ID = env.get(\"SLACK_AGGREGATIONS_CHANNEL\");\nconst data = msg.payload;\nlet dtime = data.dtime;\nvar options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\ndtime = dtime.toLocaleDateString(undefined, options)\nlet device_type = \"Water Consumption (lt)\";\nlet aggregation_type = \"Daily Summary\";\nlet aggregation = data.sum.toFixed(2).toLocaleString();\nlet curr_device = data.curr_device;\nlet blocks = [\n    {\n        \"type\": \"section\",\n        \"text\": {\n            \"text\": `*${device_type}*`,\n            \"type\": \"mrkdwn\"\n        },\n        \"fields\": [\n            {\n                \"type\": \"mrkdwn\",\n                \"text\": `Device: ${curr_device}\\nDate: ${dtime}\\n${aggregation_type}: ${aggregation}\\n\\n`\n            }\n        ]\n    }\n]\nmsg.headers = {\n    \"Authorization\": `Bearer ${SLACK_TOKEN}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n};\nmsg.payload = {\n    \"channel\": CHANNEL_ID,\n    \"blocks\": blocks\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 380,
        "wires": [
            [
                "1993b87ab1a230e1"
            ]
        ]
    },
    {
        "id": "ac82d2eb4646888b",
        "type": "function",
        "z": "e18913d54fad356d",
        "name": "late aggregation",
        "func": "const data = msg.payload;\nconst curr_device = data.device;\nif (!global.yesterdayWater[curr_device]) {\n    const date = data.startOfYesterday;\n    global.yesterdayWater[curr_device] = {\n        \"dtime\": date,\n        \"sum\": 0.0\n    };\n}\n\nglobal.yesterdayWater[curr_device].sum += data.reading;\nmsg.payload = {};\nmsg.payload.dtime = data.dtime;\nmsg.payload.device = data.device;\nmsg.payload.reading = data.reading;\nmsg.payload.sum_dtime = global.yesterdayWater[curr_device].dtime;\nmsg.payload.sum = global.yesterdayWater[curr_device].sum;\nmsg.payload.arrival_status = 'late';\nmsg.topic = \"INSERT INTO Water(dtime, device, reading, arrival_status) VALUES ( :dtime, :device, :reading, :arrival_status); \" +\n    \"INSERT INTO WaterSumDay(dtime, device, day_sum) VALUES(:sum_dtime, :device, :sum) ON DUPLICATE KEY UPDATE day_sum = :sum ;\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nif (!global.yesterdayWater) {\n    global.yesterdayWater = {};\n}",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 480,
        "wires": [
            [
                "a9221f34f677b4ec"
            ]
        ]
    },
    {
        "id": "bf663405f40e2051",
        "type": "function",
        "z": "e18913d54fad356d",
        "name": "parse data",
        "func": "const items = msg.payload.split(\"|\");\nconst date = new Date(items[0]);\nconst value = parseFloat(items[1]);\nconst device = msg.topic.split(\"/\")[4];\nlet on_off = global.get('on_off');\nif (!on_off[device]) {\n    return null;\n}\nif (date > context.get(\"startOfDay\")) {\n    const temp_date = new Date(date.getFullYear(),\n        date.getMonth(),\n        date.getDate());\n    context.set(\"startOfDay\", temp_date);\n}\n// const startOfDay = new Date();\nconst startOfDay = new Date(context.get(\"startOfDay\"));\n// startOfDay.setHours(0, 0, 0, 0);\n// const startOfYesterday = new Date();\nconst startOfYesterday = new Date(context.get(\"startOfDay\"));\nstartOfYesterday.setDate(startOfYesterday.getDate() - 1)\n// startOfYesterday.setHours(0, 0, 0, 0);\nmsg.payload = {\n    \"dtime\": date,\n    \"device\": device,\n    \"reading\": value,\n    \"startOfDay\": startOfDay,\n    \"startOfYesterday\": startOfYesterday\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nconst date = new Date();\ndate.setHours(0, 0, 0, 0);\ncontext.set(\"startOfDay\", date);",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 280,
        "wires": [
            [
                "4289d870c48f3671",
                "fe6e8001da2446bc"
            ]
        ]
    },
    {
        "id": "681abc39fc5605e6",
        "type": "mqtt in",
        "z": "e18913d54fad356d",
        "name": "Water",
        "topic": "/home/15min/W/#",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fe78548ad9d34539",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 260,
        "wires": [
            [
                "bf663405f40e2051"
            ]
        ]
    },
    {
        "id": "8e924e358de5409a",
        "type": "mqtt in",
        "z": "5e9c111b6bd7229e",
        "name": "Movement*",
        "topic": "/home/movement/#",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fe78548ad9d34539",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 240,
        "wires": [
            [
                "2d1fb7cc489d72df"
            ]
        ]
    },
    {
        "id": "75f365e544a7664e",
        "type": "debug",
        "z": "5e9c111b6bd7229e",
        "name": "parsed payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 140,
        "wires": []
    },
    {
        "id": "2d1fb7cc489d72df",
        "type": "function",
        "z": "5e9c111b6bd7229e",
        "name": "parse data",
        "func": "const items = msg.payload.split(\"|\");\nconst date = new Date(items[0]);\nconst device = msg.topic.split(\"/\")[3];\nlet on_off = global.get('on_off');\nif (!on_off[device]) {\n    return null;\n}\nconst startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\nconst startOfYesterday = new Date();\nstartOfYesterday.setDate(startOfYesterday.getDate()-1)\nstartOfYesterday.setHours(0, 0, 0, 0);\nmsg.payload={\"dtime\":date,\n    \"device\":device,\n    \"startOfDay\":startOfDay,\n    \"startOfYesterday\":startOfYesterday}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 240,
        "wires": [
            [
                "75f365e544a7664e",
                "0f42e87f603431ca"
            ]
        ]
    },
    {
        "id": "4036c5209c599a37",
        "type": "function",
        "z": "5e9c111b6bd7229e",
        "name": "insert raw data",
        "func": "const data = msg.payload;\nmsg.payload = [data.dtime, data.device];\nmsg.topic = \"INSERT INTO Movement(dtime, device) VALUES ( ?, ?);\" ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 160,
        "wires": [
            [
                "7270ddd658d9fd7e"
            ]
        ]
    },
    {
        "id": "7270ddd658d9fd7e",
        "type": "mysql",
        "z": "5e9c111b6bd7229e",
        "mydb": "28bf60a032e41c72",
        "name": "db",
        "x": 910,
        "y": 140,
        "wires": [
            [
                "19bbe1d2d5548d94"
            ]
        ]
    },
    {
        "id": "19bbe1d2d5548d94",
        "type": "debug",
        "z": "5e9c111b6bd7229e",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 80,
        "wires": []
    },
    {
        "id": "0f42e87f603431ca",
        "type": "switch",
        "z": "5e9c111b6bd7229e",
        "name": "check if late",
        "property": "payload.dtime",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "payload.startOfDay",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "payload.startOfYesterday",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 470,
        "y": 440,
        "wires": [
            [
                "4036c5209c599a37",
                "427ada93c25cbf3c",
                "4f10edbb939f0f0f"
            ],
            [
                "ad794364f65348a9"
            ],
            [
                "173bd7cd0fad224a"
            ]
        ],
        "outputLabels": [
            "not late",
            "late agg",
            "too late"
        ]
    },
    {
        "id": "ad794364f65348a9",
        "type": "debug",
        "z": "5e9c111b6bd7229e",
        "name": "late agg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 560,
        "wires": []
    },
    {
        "id": "173bd7cd0fad224a",
        "type": "debug",
        "z": "5e9c111b6bd7229e",
        "name": "too late",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 620,
        "wires": []
    },
    {
        "id": "427ada93c25cbf3c",
        "type": "function",
        "z": "5e9c111b6bd7229e",
        "name": "trigger_alarm",
        "func": "const data = msg.payload;\n\nfunction is_night_time(dtime) {\n    const date = new Date(dtime);\n    const hour = date.getHours();\n    const minutes = date.getMinutes();\n    return (hour >= 2 && (hour <=5 || (hour == 6 && minutes == 0)));\n}\n\ndata.alarmTrigger = ''\nif (global.get('last_miac') < 100) {\n    data.alarmTrigger = 'Energy';\n}\nif (is_night_time(data.dtime)) {\n    if (data.alarmTrigger == '') {\n        data.alarmTrigger = 'Time';\n    }\n    else {\n        data.alarmTrigger += ' Time';\n    }\n}\nelse if (data.alarmTrigger == ''){\n    return null\n}\n\nmsg.payload = {};\nmsg.payload.dtime = data.dtime;\nmsg.payload.alarmTrigger = data.alarmTrigger;\nmsg.topic = \"INSERT INTO Alarms(dtime, alarm_trigger) VALUES (:dtime, :alarmTrigger);\";\n//\"trigger\" is a reserved word\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 260,
        "wires": [
            [
                "7270ddd658d9fd7e",
                "9822ceaedc11dd3a",
                "4856580dde833b09"
            ]
        ]
    },
    {
        "id": "4f10edbb939f0f0f",
        "type": "function",
        "z": "5e9c111b6bd7229e",
        "name": "aggregation",
        "func": "const data = msg.payload;\nconst curr_device = data.device;\n\nif (!context.mv[curr_device]) {\n    const date = data.dtime;\n    date.setHours(0,0,0,0);\n    context.mv[curr_device] = {\n        \"dtime\": date,\n        \"sum\": 0\n    };\n}\n\nif (context.mv[curr_device].dtime.getDate() != data.dtime.getDate()) {\n    msg.payload = [context.mv[curr_device].dtime, curr_device, context.mv[curr_device].sum];\n    msg.topic = \"INSERT INTO MovementSumDay(dtime, device, day_count) VALUES(?, ?, ?);\";\n    const date = data.dtime;\n    date.setHours(0, 0, 0, 0);\n    context.mv[curr_device].dtime = date;\n    context.mv[curr_device].sum = 0;\n    return msg;\n}\n\ncontext.mv[curr_device].sum++;\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.mv = {};",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 380,
        "wires": [
            [
                "7270ddd658d9fd7e"
            ]
        ]
    },
    {
        "id": "9822ceaedc11dd3a",
        "type": "debug",
        "z": "5e9c111b6bd7229e",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 360,
        "wires": []
    },
    {
        "id": "4856580dde833b09",
        "type": "function",
        "z": "5e9c111b6bd7229e",
        "name": "prepare request",
        "func": "const SLACK_TOKEN  = env.get(\"SLACK_TOKEN\");\nconst CHANNEL_ID = env.get(\"SLACK_ALARMS_CHANNEL\");\nconst data = msg.payload;\nlet dtime = data.dtime;\nvar options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' , hour: '2-digit', minute: '2-digit'};\ndtime = dtime.toLocaleDateString(undefined, options)\nlet alarm_trigger = data.alarmTrigger;\nlet blocks = [\n    {\n        \"type\": \"section\",\n        \"text\": {\n            \"text\": `*Alarm Triggered ${dtime}*`,\n            \"type\": \"mrkdwn\"\n        },\n        \"fields\": [\n            {\n                \"type\": \"mrkdwn\",\n                \"text\": `Trigger: ${alarm_trigger}\\n\\n`\n        }\n        ]\n    }]\nmsg.headers = {\n    \"Authorization\": `Bearer ${SLACK_TOKEN}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n};\nmsg.payload = {\n    \"channel\": CHANNEL_ID,\n    \"blocks\": blocks\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 240,
        "wires": [
            [
                "cc108a4b122cff7f"
            ]
        ]
    },
    {
        "id": "06563609600887b6",
        "type": "debug",
        "z": "5e9c111b6bd7229e",
        "name": "debug 21",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 440,
        "wires": []
    },
    {
        "id": "cc108a4b122cff7f",
        "type": "http request",
        "z": "5e9c111b6bd7229e",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://slack.com/api/chat.postMessage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1210,
        "y": 240,
        "wires": [
            [
                "06563609600887b6"
            ]
        ]
    },
    {
        "id": "0f2253c109585869",
        "type": "mqtt in",
        "z": "307fd7ad0d937d18",
        "name": "Etot",
        "topic": "/home/day/Etot",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fe78548ad9d34539",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 240,
        "wires": [
            [
                "6b430e1549f82291"
            ]
        ]
    },
    {
        "id": "6830f055ef0c33a7",
        "type": "debug",
        "z": "307fd7ad0d937d18",
        "name": "parsed payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 140,
        "wires": []
    },
    {
        "id": "6b430e1549f82291",
        "type": "function",
        "z": "307fd7ad0d937d18",
        "name": "parse data",
        "func": "const items = msg.payload.split(\"|\");\nconst date = new Date(items[0]);\nconst value = parseFloat(items[1]);\nconst device = msg.topic.split(\"/\")[4];\nlet on_off = global.get('on_off');\nif (!on_off[device]) {\n    return null;\n}\nconst startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\nconst startOfYesterday = new Date();\nstartOfYesterday.setDate(startOfYesterday.getDate()-1)\nstartOfYesterday.setHours(0, 0, 0, 0);\nmsg.payload={\"dtime\":date,\n    \"device\":device,\n    \"reading\":value,\n    \"startOfDay\":startOfDay,\n    \"startOfYesterday\":startOfYesterday}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 240,
        "wires": [
            [
                "6830f055ef0c33a7",
                "92287b87d1c89951"
            ]
        ]
    },
    {
        "id": "ecc009c3c93dabfa",
        "type": "function",
        "z": "307fd7ad0d937d18",
        "name": "insert raw data",
        "func": "const data = msg.payload;\nmsg.payload = {};\nmsg.payload.dtime = data.dtime;\nmsg.payload.reading = data.reading;\nmsg.topic = \"INSERT INTO Etot(dtime, reading) VALUES ( :dtime, :reading);\" ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 160,
        "wires": [
            [
                "d209a982071b3a96"
            ]
        ]
    },
    {
        "id": "d209a982071b3a96",
        "type": "mysql",
        "z": "307fd7ad0d937d18",
        "mydb": "28bf60a032e41c72",
        "name": "db",
        "x": 1010,
        "y": 140,
        "wires": [
            [
                "8e2dfa60443b7e20"
            ]
        ]
    },
    {
        "id": "8e2dfa60443b7e20",
        "type": "debug",
        "z": "307fd7ad0d937d18",
        "name": "debug 16",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 80,
        "wires": []
    },
    {
        "id": "92287b87d1c89951",
        "type": "switch",
        "z": "307fd7ad0d937d18",
        "name": "check if late",
        "property": "payload.dtime",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "payload.startOfDay",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "payload.startOfYesterday",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 570,
        "y": 440,
        "wires": [
            [
                "ecc009c3c93dabfa",
                "3c06a91ac8e5556a"
            ],
            [
                "a266cd0765504801"
            ],
            [
                "54c2ea5aca0c2b76"
            ]
        ],
        "outputLabels": [
            "not late",
            "late agg",
            "too late"
        ]
    },
    {
        "id": "a266cd0765504801",
        "type": "debug",
        "z": "307fd7ad0d937d18",
        "name": "late agg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 560,
        "wires": []
    },
    {
        "id": "54c2ea5aca0c2b76",
        "type": "debug",
        "z": "307fd7ad0d937d18",
        "name": "too late",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 620,
        "wires": []
    },
    {
        "id": "3c06a91ac8e5556a",
        "type": "function",
        "z": "307fd7ad0d937d18",
        "name": "calculate Etot day diff",
        "func": "if (!flow.get(\"previousEtot\")){\n    flow.set(\"previousEtot\", msg.payload.reading);\n    msg.payload.day_diff = msg.payload.reading;\n}else{\n    var diff = msg.payload.reading - flow.get(\"previousEtot\");\n    msg.payload.day_diff = diff;\n    flow.set(\"previousEtot\", msg.payload.reading);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"previousEtot\", 0)",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 440,
        "wires": [
            [
                "62e88daf0cdad87d",
                "0801adf3b6a87e35"
            ]
        ]
    },
    {
        "id": "62e88daf0cdad87d",
        "type": "function",
        "z": "307fd7ad0d937d18",
        "name": "insert daydiff data",
        "func": "const data = msg.payload;\nmsg.payload = {};\nmsg.payload.dtime = data.dtime;\nmsg.payload.day_diff = data.day_diff;\nmsg.topic = \"INSERT INTO EtotDayDiff(dtime, day_diff) VALUES ( :dtime, :day_diff);\" ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 480,
        "wires": [
            [
                "78b0c8705fc184ab",
                "7e06b34f1437387f",
                "825b254c4cd5e23f"
            ]
        ]
    },
    {
        "id": "78b0c8705fc184ab",
        "type": "mysql",
        "z": "307fd7ad0d937d18",
        "mydb": "28bf60a032e41c72",
        "name": "db",
        "x": 1390,
        "y": 380,
        "wires": [
            [
                "7e06b34f1437387f"
            ]
        ]
    },
    {
        "id": "7e06b34f1437387f",
        "type": "debug",
        "z": "307fd7ad0d937d18",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 440,
        "wires": []
    },
    {
        "id": "035faa6d1c6d5f77",
        "type": "function",
        "z": "307fd7ad0d937d18",
        "name": "insert leak data",
        "func": "const data = msg.payload;\nvar day_diff = msg.payload.day_diff;\nconst rest = day_diff - global.get(\"last_hvac_sum\") - global.get(\"last_miac_sum\");\nmsg.payload = [data.dtime,rest];\nmsg.topic =  \"INSERT INTO ElecDayRest(dtime, leak_amount) VALUES ( ?, ?);\";\nglobal.set(\"last_hvac_sum\", 0);\nglobal.set(\"last_miac_sum\", 0);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set(\"last_hvac_sum\",0);\nglobal.set(\"last_miac_sum\",0);",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 580,
        "wires": [
            [
                "78b0c8705fc184ab",
                "7e06b34f1437387f"
            ]
        ]
    },
    {
        "id": "0801adf3b6a87e35",
        "type": "delay",
        "z": "307fd7ad0d937d18",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1060,
        "y": 620,
        "wires": [
            [
                "035faa6d1c6d5f77"
            ]
        ]
    },
    {
        "id": "eb8d0502bf2eb08b",
        "type": "http request",
        "z": "307fd7ad0d937d18",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://slack.com/api/chat.postMessage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1550,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "825b254c4cd5e23f",
        "type": "function",
        "z": "307fd7ad0d937d18",
        "name": "prepare request",
        "func": "if (!msg) {\n    return null;\n}\nconst SLACK_TOKEN = env.get(\"SLACK_TOKEN\");\nconst CHANNEL_ID = env.get(\"SLACK_AGGREGATIONS_CHANNEL\");\nconst data = msg.payload;\nlet dtime = data.dtime;\nvar options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\ndtime = dtime.toLocaleDateString(undefined, options)\nlet device_type = \"Total Daily Power Consumption (Wh)\";\nlet reading = data.day_diff.toLocaleString();\nlet blocks = [\n    {\n        \"type\": \"section\",\n        \"text\": {\n            \"text\": `*${device_type}*`,\n            \"type\": \"mrkdwn\"\n        },\n        \"fields\": [\n            {\n                \"type\": \"mrkdwn\",\n                \"text\": `Date: ${dtime}\\nTotal: ${reading}\\n\\n`\n            }\n        ]\n    }\n]\nmsg.headers = {\n    \"Authorization\": `Bearer ${SLACK_TOKEN}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n};\nmsg.payload = {\n    \"channel\": CHANNEL_ID,\n    \"blocks\": blocks\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 300,
        "wires": [
            [
                "eb8d0502bf2eb08b"
            ]
        ]
    },
    {
        "id": "0acee262873261ca",
        "type": "mqtt in",
        "z": "23fc6784401a0cff",
        "name": "Wtot",
        "topic": "/home/day/Wtot",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fe78548ad9d34539",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 300,
        "wires": [
            [
                "8ff2e6498dc3e2b1"
            ]
        ]
    },
    {
        "id": "63979c3978af34be",
        "type": "debug",
        "z": "23fc6784401a0cff",
        "name": "parsed payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 200,
        "wires": []
    },
    {
        "id": "8ff2e6498dc3e2b1",
        "type": "function",
        "z": "23fc6784401a0cff",
        "name": "parse data",
        "func": "const items = msg.payload.split(\"|\");\nconst date = new Date(items[0]);\nconst value = parseFloat(items[1]);\nconst device = msg.topic.split(\"/\")[4];\nlet on_off = global.get('on_off');\nif (!on_off[device]) {\n    return null;\n}\nconst startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\nconst startOfYesterday = new Date();\nstartOfYesterday.setDate(startOfYesterday.getDate()-1)\nstartOfYesterday.setHours(0, 0, 0, 0);\nmsg.payload={\"dtime\":date,\n    \"device\":device,\n    \"reading\":value,\n    \"startOfDay\":startOfDay,\n    \"startOfYesterday\":startOfYesterday}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 300,
        "wires": [
            [
                "63979c3978af34be",
                "f2f9b1542184781d"
            ]
        ]
    },
    {
        "id": "c1840e94c8760175",
        "type": "function",
        "z": "23fc6784401a0cff",
        "name": "insert raw data",
        "func": "const data = msg.payload;\nmsg.payload = [data.dtime, data.reading];\nmsg.topic = \"INSERT INTO Wtot(dtime, reading) VALUES ( ?, ?);\" ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 220,
        "wires": [
            [
                "8522633b0740bba8"
            ]
        ]
    },
    {
        "id": "8522633b0740bba8",
        "type": "mysql",
        "z": "23fc6784401a0cff",
        "mydb": "28bf60a032e41c72",
        "name": "db",
        "x": 1030,
        "y": 200,
        "wires": [
            [
                "6a7132a189971ab1"
            ]
        ]
    },
    {
        "id": "6a7132a189971ab1",
        "type": "debug",
        "z": "23fc6784401a0cff",
        "name": "debug 18",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 140,
        "wires": []
    },
    {
        "id": "f2f9b1542184781d",
        "type": "switch",
        "z": "23fc6784401a0cff",
        "name": "check if late",
        "property": "payload.dtime",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "payload.startOfDay",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "payload.startOfYesterday",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 590,
        "y": 500,
        "wires": [
            [
                "c1840e94c8760175",
                "2fd27c9412bca9fd"
            ],
            [
                "70c1def2e8d87c2c"
            ],
            [
                "4193b16ac5a2245c"
            ]
        ],
        "outputLabels": [
            "not late",
            "late agg",
            "too late"
        ]
    },
    {
        "id": "70c1def2e8d87c2c",
        "type": "debug",
        "z": "23fc6784401a0cff",
        "name": "late agg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 620,
        "wires": []
    },
    {
        "id": "4193b16ac5a2245c",
        "type": "debug",
        "z": "23fc6784401a0cff",
        "name": "too late",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 680,
        "wires": []
    },
    {
        "id": "13f684ee415126f7",
        "type": "debug",
        "z": "23fc6784401a0cff",
        "name": "todo: aggregate",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 360,
        "wires": []
    },
    {
        "id": "2fd27c9412bca9fd",
        "type": "function",
        "z": "23fc6784401a0cff",
        "name": "calculate Wtot day diff",
        "func": "if (!flow.get(\"previousWtot\")){\n    flow.set(\"previousWtot\", msg.payload.reading);\n    msg.payload.day_diff = msg.payload.reading;\n}else{\n    var diff=msg.payload.reading-flow.get(\"previousWtot\");\n    msg.payload.day_diff = diff;\n    flow.set(\"previousWtot\", msg.payload.reading);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"previousWtot\",0)",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 480,
        "wires": [
            [
                "22c3fc0e3c651c9e",
                "d985851acd8b4580"
            ]
        ]
    },
    {
        "id": "22c3fc0e3c651c9e",
        "type": "function",
        "z": "23fc6784401a0cff",
        "name": "insert daydiff data",
        "func": "const data = msg.payload;\nmsg.payload = [data.dtime, data.day_diff];\nmsg.payload = {};\nmsg.payload.dtime = data.dtime;\nmsg.payload.day_diff = data.day_diff\nmsg.topic = \"INSERT INTO WtotDayDiff(dtime, day_diff) VALUES ( :dtime, :day_diff);\" ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 520,
        "wires": [
            [
                "a1bb3f7804944a54",
                "13f684ee415126f7",
                "b261023120205d7c"
            ]
        ]
    },
    {
        "id": "a1bb3f7804944a54",
        "type": "mysql",
        "z": "23fc6784401a0cff",
        "mydb": "28bf60a032e41c72",
        "name": "db",
        "x": 1370,
        "y": 460,
        "wires": [
            [
                "4fc1ec33520bb39f"
            ]
        ]
    },
    {
        "id": "4fc1ec33520bb39f",
        "type": "debug",
        "z": "23fc6784401a0cff",
        "name": "debug 19",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 400,
        "wires": []
    },
    {
        "id": "d985851acd8b4580",
        "type": "delay",
        "z": "23fc6784401a0cff",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 640,
        "wires": [
            [
                "1aab1ed493c428eb"
            ]
        ]
    },
    {
        "id": "1aab1ed493c428eb",
        "type": "function",
        "z": "23fc6784401a0cff",
        "name": "insert leak data",
        "func": "const data = msg.payload;\nvar day_diff = msg.payload.day_diff;\nconst rest = day_diff - global.get(\"last_w_sum\");\nmsg.payload = [data.dtime,rest];\nmsg.topic =  \"INSERT INTO WaterDayRest(dtime, leak_amount) VALUES ( ?, ?);\";\nglobal.set(\"last_w_sum\", 0);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set(\"last_w_sum\", 0);",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 600,
        "wires": [
            [
                "a1bb3f7804944a54"
            ]
        ]
    },
    {
        "id": "96a19893083a9f1d",
        "type": "http request",
        "z": "23fc6784401a0cff",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://slack.com/api/chat.postMessage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1450,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "b261023120205d7c",
        "type": "function",
        "z": "23fc6784401a0cff",
        "name": "prepare request",
        "func": "if (!msg) {\n    return null;\n}\nconst SLACK_TOKEN = env.get(\"SLACK_TOKEN\");\nconst CHANNEL_ID = env.get(\"SLACK_AGGREGATIONS_CHANNEL\");\nconst data = msg.payload;\nlet dtime = data.dtime;\nvar options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\ndtime = dtime.toLocaleDateString(undefined, options)\nlet device_type = \"Total Water Consumption (lt)\";\nlet reading = data.day_diff.toLocaleString();\nlet blocks = [\n    {\n        \"type\": \"section\",\n        \"text\": {\n            \"text\": `*${device_type}*`,\n            \"type\": \"mrkdwn\"\n        },\n        \"fields\": [\n            {\n                \"type\": \"mrkdwn\",\n                \"text\": `Date: ${dtime}\\nTotal: ${reading}\\n\\n`\n            }\n        ]\n    }\n]\nmsg.headers = {\n    \"Authorization\": `Bearer ${SLACK_TOKEN}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n};\nmsg.payload = {\n    \"channel\": CHANNEL_ID,\n    \"blocks\": blocks\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 300,
        "wires": [
            [
                "96a19893083a9f1d"
            ]
        ]
    },
    {
        "id": "0e8d3b2c62c37017",
        "type": "http in",
        "z": "5ff96d6be0bced20",
        "name": "last_reading http in",
        "url": "/last_reading",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "de0317df00897f2d"
            ]
        ]
    },
    {
        "id": "de0317df00897f2d",
        "type": "function",
        "z": "5ff96d6be0bced20",
        "name": "sig_verification",
        "func": "const qs = global.get('qs');\nconst crypto = global.get('crypto');\nconst SLACK_SIGNING_SECRET = env.get(\"SIGNING_SECRET\");\nlet res_msg = msg;\nlet slackSignature = msg.req.headers['x-slack-signature'];\nlet requestBody = qs.stringify(msg.req.body, { format: 'RFC1738' });\nlet timestamp = msg.req.headers['x-slack-request-timestamp'];\n\nlet time = Math.floor(new Date().getTime()/1000);\n\nif (Math.abs(time-timestamp) > 300) {\n    res_msg.statusCode = 400;\n    return [null, res_msg];\n}\n\nlet sigBasestring = 'v0:' + timestamp + ':' + requestBody;\nlet expectedSig = 'v0=' +\n    crypto.createHmac('sha256', SLACK_SIGNING_SECRET)\n        .update(sigBasestring, 'utf8')\n        .digest('hex');\nif (!crypto.timingSafeEqual(\n    Buffer.from(expectedSig, 'utf8'),\n    Buffer.from(slackSignature, 'utf8'))) {\n        res_msg.statusCode = 400;\n        return [null, res_msg];\n    }\nres_msg.statusCode = 200;\nreturn [msg, res_msg];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 200,
        "wires": [
            [
                "5f1fe4264e25e5d9"
            ],
            [
                "2fb7e2285b12c72d"
            ]
        ]
    },
    {
        "id": "2fb7e2285b12c72d",
        "type": "http response",
        "z": "5ff96d6be0bced20",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 550,
        "y": 340,
        "wires": []
    },
    {
        "id": "b2341fe9d1150f57",
        "type": "http request",
        "z": "5ff96d6be0bced20",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://slack.com/api/chat.postMessage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "5f1fe4264e25e5d9",
        "type": "function",
        "z": "5ff96d6be0bced20",
        "name": "last_reading",
        "func": "if (!msg) {\n    return null;\n}\n\nconst SLACK_TOKEN = env.get(\"SLACK_TOKEN\");\nlet data = msg.payload;\nlet channel_id = data.channel_id;\nlet user_name = data.user_name;\nlet text = data.text;\nmsg.headers = {\n    \"Authorization\": `Bearer ${SLACK_TOKEN}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n};\nif ((text.split(' ')).length != 1) {\n    msg.payload = {\n        \"channel\": channel_id,\n        \"text\": `${user_name}, you need to specify exactly one device which reading you want. For more info type '/last_reading -help'`\n    }\n    return msg;\n}\nif (text == \"-help\" || text == \"-h\") {\n    msg.payload = {\n        \"channel\": channel_id,\n        \"text\": `usage: /last_reading device\\t#Returns the last reading for the specidfied device\\n/last_reading -devices\\t#Returns the available devices\\n/last_reading -help\\t#Returns the usa cases of the command\\n/last_reading -h\\t#Same as /last_reading -help`\n    }\n    return msg;\n}\nlet last_reading = global.get('last_reading');\n\nif (text == \"-devices\") {\n    let devices = \"\";\n    for (let device in last_reading) {\n        devices += device + '\\n'\n    }\n    msg.payload = {\n        \"channel\": channel_id,\n        \"text\": `The available devices are:\\n${devices}`\n    }\n    return msg;\n}\n\nif (!(text in last_reading)) {\n    msg.payload = {\n        \"channel\": channel_id,\n        \"text\": `${text} is not a device. Use /last_reading -devices to see the available devices.`\n    }\n    return msg;\n}\nmsg.payload = {\n    \"channel\": channel_id,\n    \"text\": `The last reading for ${text} is ${last_reading[text]}`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set('last_reading', {\n    \"TH1\": 0,\n    \"TH2\": 0,\n    \"HVAC1\": 0,\n    \"HVAC2\": 0,\n    \"MiAC1\": 0,\n    \"MiAC2\": 0,\n    \"W1\": 0\n})",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 100,
        "wires": [
            [
                "b2341fe9d1150f57"
            ]
        ]
    },
    {
        "id": "c48034fc3efb9f38",
        "type": "http in",
        "z": "5ff96d6be0bced20",
        "name": "on_off http in",
        "url": "/on_off",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "62bfc3567c74139d"
            ]
        ]
    },
    {
        "id": "62bfc3567c74139d",
        "type": "function",
        "z": "5ff96d6be0bced20",
        "name": "sig_verification",
        "func": "const qs = global.get('qs');\nconst crypto = global.get('crypto');\nconst SLACK_SIGNING_SECRET = env.get(\"SIGNING_SECRET\");\nlet res_msg = msg;\nlet slackSignature = msg.req.headers['x-slack-signature'];\nlet requestBody = qs.stringify(msg.req.body, { format: 'RFC1738' });\nlet timestamp = msg.req.headers['x-slack-request-timestamp'];\n\nlet time = Math.floor(new Date().getTime()/1000);\n\nif (Math.abs(time-timestamp) > 300) {\n    res_msg.statusCode = 400;\n    return [null, res_msg];\n}\n\nlet sigBasestring = 'v0:' + timestamp + ':' + requestBody;\nlet expectedSig = 'v0=' +\n    crypto.createHmac('sha256', SLACK_SIGNING_SECRET)\n        .update(sigBasestring, 'utf8')\n        .digest('hex');\nif (!crypto.timingSafeEqual(\n    Buffer.from(expectedSig, 'utf8'),\n    Buffer.from(slackSignature, 'utf8'))) {\n        res_msg.statusCode = 400;\n        return [null, res_msg];\n    }\nres_msg.statusCode = 200;\nreturn [msg, res_msg];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 580,
        "wires": [
            [
                "be6691e193999679"
            ],
            [
                "c485523ece0434b3"
            ]
        ]
    },
    {
        "id": "c485523ece0434b3",
        "type": "http response",
        "z": "5ff96d6be0bced20",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 550,
        "y": 720,
        "wires": []
    },
    {
        "id": "4a74e6fb7ab515c4",
        "type": "http request",
        "z": "5ff96d6be0bced20",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://slack.com/api/chat.postMessage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "be6691e193999679",
        "type": "function",
        "z": "5ff96d6be0bced20",
        "name": "on_off",
        "func": "if (!msg) {\n    return null;\n}\n\nconst SLACK_TOKEN = env.get(\"SLACK_TOKEN\");\nlet data = msg.payload;\nlet channel_id = data.channel_id;\nlet user_name = data.user_name;\nlet text = data.text;\nmsg.headers = {\n    \"Authorization\": `Bearer ${SLACK_TOKEN}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n};\nif ((text.split(' ')).length != 1) {\n    msg.payload = {\n        \"channel\": channel_id,\n        \"text\": `${user_name}, you need to specify exactly one device that you want to turn on/off. For more info type '/on_off -help'`\n    }\n    return msg;\n}\nif (text == \"-help\" || text == \"-h\") {\n    msg.payload = {\n        \"channel\": channel_id,\n        \"text\": `usage: /on_off device\\t#Turns on/off the specidfied device\\n/on_off -devices\\t#Returns the available devices\\n/on_off -help\\t#Returns the use cases of the command\\n/on_off -h\\t#Same as /on_off -help`\n    }\n    return msg;\n}\nlet on_off = global.get('on_off');\n\nif (text == \"-devices\") {\n    let devices = \"\";\n    for (let device in on_off) {\n        devices += device + '\\n'\n    }\n    msg.payload = {\n        \"channel\": channel_id,\n        \"text\": `The available devices are:\\n${devices}`\n    }\n    return msg;\n}\n\nif (!(text in on_off)) {\n    msg.payload = {\n        \"channel\": channel_id,\n        \"text\": `${text} is not a device. Use /on_off -devices to see the available devices.`\n    }\n    return msg;\n}\n\n\non_off[text] = !on_off[text];\nif (on_off[text]) {\n    msg.payload = {\n    \"channel\": channel_id,\n    \"text\": `Turning on ${text}`\n    }\n}\nelse {\n    msg.payload = {\n        \"channel\": channel_id,\n        \"text\": `Turning off ${text}`\n    }\n}\n\nglobal.set('on_off', on_off)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set('on_off', {\n    \"TH1\": true,\n    \"TH2\": true,\n    \"HVAC1\": true,\n    \"HVAC2\": true,\n    \"MiAC1\": true,\n    \"MiAC2\": true,\n    \"W1\": true,\n    \"Mov1\": true,\n    \"Etot\": true,\n    \"Wtot\": true\n})",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 480,
        "wires": [
            [
                "4a74e6fb7ab515c4"
            ]
        ]
    }
]