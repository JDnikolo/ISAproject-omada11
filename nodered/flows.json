[
    {
        "id": "6569ea1565314d25",
        "type": "tab",
        "label": "TH parsing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5deb24103533351d",
        "type": "tab",
        "label": "HVAC Parsing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3daf70b601a8f1f4",
        "type": "tab",
        "label": "MiAC Parsing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b2ec95917b31b4c9",
        "type": "tab",
        "label": "Water Parsing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f90b855aadc86ac8",
        "type": "tab",
        "label": "Movement Parsing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "22cff19950bf15c7",
        "type": "tab",
        "label": "Etot parsing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "41d53ab346bb4ea0",
        "type": "tab",
        "label": "Wtot parsing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7732566edda24d93",
        "type": "tab",
        "label": "Slack Slash Commands",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fe78548ad9d34539",
        "type": "mqtt-broker",
        "name": "mqtt",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "28bf60a032e41c72",
        "type": "MySQLdatabase",
        "name": "iot_home",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "iot_home",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "663368d6787602de",
        "type": "mqtt in",
        "z": "6569ea1565314d25",
        "name": "TH*",
        "topic": "/home/15min/TH/#",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fe78548ad9d34539",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 220,
        "wires": [
            [
                "4dbf391064a87d9b"
            ]
        ]
    },
    {
        "id": "a7c77f8a0bdfd27b",
        "type": "debug",
        "z": "6569ea1565314d25",
        "name": "parsed payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 120,
        "wires": []
    },
    {
        "id": "4dbf391064a87d9b",
        "type": "function",
        "z": "6569ea1565314d25",
        "name": "parse data",
        "func": "const items = msg.payload.split(\"|\");\nconst date = new Date(items[0]);\nconst value = parseFloat(items[1]);\nconst device = msg.topic.split(\"/\")[4];\nconst startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\nconst startOfYesterday = new Date();\nstartOfYesterday.setDate(startOfYesterday.getDate()-1)\nstartOfYesterday.setHours(0, 0, 0, 0);\nmsg.payload={\"dtime\":date,\n    \"device\":device,\n    \"reading\":value,\n    \"startOfDay\":startOfDay,\n    \"startOfYesterday\":startOfYesterday}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 220,
        "wires": [
            [
                "a7c77f8a0bdfd27b",
                "adc1db4b5056b81b"
            ]
        ]
    },
    {
        "id": "e25b480afac5508b",
        "type": "function",
        "z": "6569ea1565314d25",
        "name": "insert raw data",
        "func": "const data = msg.payload;\nmsg.payload = [data.dtime, data.device, data.reading];\nmsg.topic = \"INSERT INTO TH(dtime, device, reading) VALUES ( ?, ?, ?);\" ;\nlet last_reading = global.get('last_reading');\nlast_reading[data.device] = data.reading;\nglobal.set('last_reading', last_reading);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 140,
        "wires": [
            [
                "0bcc1bea28bd7c00"
            ]
        ]
    },
    {
        "id": "0bcc1bea28bd7c00",
        "type": "mysql",
        "z": "6569ea1565314d25",
        "mydb": "28bf60a032e41c72",
        "name": "db",
        "x": 850,
        "y": 120,
        "wires": [
            [
                "2bd52ed133cfbcc1"
            ]
        ]
    },
    {
        "id": "2bd52ed133cfbcc1",
        "type": "debug",
        "z": "6569ea1565314d25",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 60,
        "wires": []
    },
    {
        "id": "adc1db4b5056b81b",
        "type": "switch",
        "z": "6569ea1565314d25",
        "name": "check if late",
        "property": "payload.dtime",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "payload.startOfDay",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "payload.startOfYesterday",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 410,
        "y": 420,
        "wires": [
            [
                "e25b480afac5508b",
                "aecdceeb57f7c11e"
            ],
            [
                "cdf3c779b502e40e"
            ],
            [
                "389473f2cf2da59c"
            ]
        ],
        "outputLabels": [
            "not late",
            "late agg",
            "too late"
        ]
    },
    {
        "id": "cdf3c779b502e40e",
        "type": "debug",
        "z": "6569ea1565314d25",
        "name": "late agg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 540,
        "wires": []
    },
    {
        "id": "389473f2cf2da59c",
        "type": "debug",
        "z": "6569ea1565314d25",
        "name": "too late",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 600,
        "wires": []
    },
    {
        "id": "aecdceeb57f7c11e",
        "type": "function",
        "z": "6569ea1565314d25",
        "name": "aggregation",
        "func": "const data = msg.payload;\nconst curr_device = data.device;\nif (!context.th[curr_device]) {\n    const date = data.dtime;\n    date.setHours(0,0,0,0);\n    context.th[curr_device] = {\n        \"dtime\": date,\n        \"freq\": 0.0,\n        \"sum\": 0.0  \n    };\n}\n\nif (context.th[curr_device].dtime.getDate() != data.dtime.getDate()) {\n    msg.payload = {};\n    msg.payload.dtime = context.th[curr_device].dtime;\n    msg.payload.curr_device =  curr_device;\n    msg.payload.sum = context.th[curr_device].sum / context.th[curr_device].freq;\n    msg.topic = \"INSERT INTO THAvgDay(dtime, device, day_avg) VALUES(:dtime, :curr_device, :sum);\";\n    const date = data.dtime;\n    date.setHours(0, 0, 0, 0);\n    context.th[curr_device].dtime = date;\n    context.th[curr_device].freq = 1.0;\n    context.th[curr_device].sum = data.reading;\n    return msg;\n}\n\ncontext.th[curr_device].freq += 1.0;\ncontext.th[curr_device].sum += data.reading;\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.th = {};",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 320,
        "wires": [
            [
                "0bcc1bea28bd7c00",
                "51d4277f91b0612f"
            ]
        ]
    },
    {
        "id": "db1f8d1cea5ff123",
        "type": "http request",
        "z": "6569ea1565314d25",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://slack.com/api/chat.postMessage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1130,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "51d4277f91b0612f",
        "type": "function",
        "z": "6569ea1565314d25",
        "name": "prepare request",
        "func": "if (!msg) {\n    return null;\n}\nconst SLACK_TOKEN = env.get(\"SLACK_TOKEN\");\nconst CHANNEL_ID = \"C04N3ULSX9R\";\nconst data = msg.payload;\nlet dtime = data.dtime;\nvar options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'};\ndtime = dtime.toLocaleDateString(undefined, options)\nlet device_type = \"Temperature (Â°C)\";\nlet aggregation_type = \"Average\";\nlet aggregation = data.sum.toFixed(2).toLocaleString();\nlet curr_device = data.curr_device;\nlet blocks = [\n    {\n        \"type\": \"section\",\n        \"text\": {\n            \"text\": `*${device_type}*`,\n            \"type\": \"mrkdwn\"\n        },\n        \"fields\": [\n            {\n                \"type\": \"mrkdwn\",\n                \"text\": `Device: ${curr_device}\\nDate: ${dtime}\\n${aggregation_type}: ${aggregation}\\n\\n`\n        }\n        ]\n    }\n]\nmsg.headers = {\n    \"Authorization\": `Bearer ${SLACK_TOKEN}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n};\nmsg.payload = {\n    \"channel\": CHANNEL_ID,\n    \"blocks\": blocks\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 320,
        "wires": [
            [
                "db1f8d1cea5ff123"
            ]
        ]
    },
    {
        "id": "db343227b526be61",
        "type": "mqtt in",
        "z": "5deb24103533351d",
        "name": "HVAC*",
        "topic": "/home/15min/HVAC/#",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fe78548ad9d34539",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 240,
        "wires": [
            [
                "051c876332cc09ee"
            ]
        ]
    },
    {
        "id": "f98893c25793894a",
        "type": "debug",
        "z": "5deb24103533351d",
        "name": "parsed payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 140,
        "wires": []
    },
    {
        "id": "051c876332cc09ee",
        "type": "function",
        "z": "5deb24103533351d",
        "name": "parse data",
        "func": "const items = msg.payload.split(\"|\");\nconst date = new Date(items[0]);\nconst value = parseInt(items[1]);\nconst device = msg.topic.split(\"/\")[4];\nconst startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\nconst startOfYesterday = new Date();\nstartOfYesterday.setDate(startOfYesterday.getDate()-1)\nstartOfYesterday.setHours(0, 0, 0, 0);\nmsg.payload={\"dtime\":date,\n    \"device\":device,\n    \"reading\":value,\n    \"startOfDay\":startOfDay,\n    \"startOfYesterday\":startOfYesterday}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 240,
        "wires": [
            [
                "f98893c25793894a",
                "251b784d4a9d7898"
            ]
        ]
    },
    {
        "id": "bb81b1ea5cca70c3",
        "type": "function",
        "z": "5deb24103533351d",
        "name": "insert raw data",
        "func": "const data = msg.payload;\nmsg.payload = [data.dtime, data.device, data.reading];\nmsg.topic = \"INSERT INTO HVAC(dtime, device, reading) VALUES ( ?, ?, ?);\" ;\nlet last_reading = global.get('last_reading');\nlast_reading[data.device] = data.reading;\nglobal.set('last_reading', last_reading);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 160,
        "wires": [
            [
                "9b7b4a2e46ba2741"
            ]
        ]
    },
    {
        "id": "9b7b4a2e46ba2741",
        "type": "mysql",
        "z": "5deb24103533351d",
        "mydb": "28bf60a032e41c72",
        "name": "db",
        "x": 870,
        "y": 140,
        "wires": [
            [
                "856a6f69fce363fc"
            ]
        ]
    },
    {
        "id": "856a6f69fce363fc",
        "type": "debug",
        "z": "5deb24103533351d",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 80,
        "wires": []
    },
    {
        "id": "251b784d4a9d7898",
        "type": "switch",
        "z": "5deb24103533351d",
        "name": "check if late",
        "property": "payload.dtime",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "payload.startOfDay",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "payload.startOfYesterday",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 430,
        "y": 440,
        "wires": [
            [
                "bb81b1ea5cca70c3",
                "b3ad7788a6b5dc6d"
            ],
            [
                "ee0235a7b17a3081"
            ],
            [
                "4d6624a8dd4415aa"
            ]
        ],
        "outputLabels": [
            "not late",
            "late agg",
            "too late"
        ]
    },
    {
        "id": "ee0235a7b17a3081",
        "type": "debug",
        "z": "5deb24103533351d",
        "name": "late agg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 560,
        "wires": []
    },
    {
        "id": "4d6624a8dd4415aa",
        "type": "debug",
        "z": "5deb24103533351d",
        "name": "too late",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 620,
        "wires": []
    },
    {
        "id": "b3ad7788a6b5dc6d",
        "type": "function",
        "z": "5deb24103533351d",
        "name": "aggregation",
        "func": "const data = msg.payload;\nconst curr_device = data.device;\n\nif (!context.hvac[curr_device]) {\n    const date = data.dtime;\n    date.setHours(0,0,0,0);\n    context.hvac[curr_device] = {\n        \"dtime\": date,\n        \"sum\": 0\n    };\n}\n\nif (context.hvac[curr_device].dtime.getDate() != data.dtime.getDate()) {\n    msg.payload = [context.hvac[curr_device].dtime, curr_device, context.hvac[curr_device].sum];\n    msg.payload = {};\n    msg.payload.dtime = context.hvac[curr_device].dtime;\n    msg.payload.curr_device = curr_device;\n    msg.payload.sum = context.hvac[curr_device].sum;\n    msg.topic = \"INSERT INTO HVACSumDay(dtime, device, day_sum) VALUES(:dtime, :curr_device, :sum);\";\n    global.set(\"last_hvac_sum\", global.get(\"last_hvac_sum\")+context.hvac[curr_device].sum);\n    const date = data.dtime;\n    date.setHours(0, 0, 0, 0);\n    context.hvac[curr_device].dtime = date;\n    context.hvac[curr_device].sum = data.reading;\n    return msg;\n}\ncontext.hvac[curr_device].sum += data.reading;\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.hvac = {};",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 380,
        "wires": [
            [
                "9b7b4a2e46ba2741",
                "617d53c711c00b33"
            ]
        ]
    },
    {
        "id": "6e7ee24a1357333b",
        "type": "http request",
        "z": "5deb24103533351d",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://slack.com/api/chat.postMessage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1130,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "617d53c711c00b33",
        "type": "function",
        "z": "5deb24103533351d",
        "name": "prepare request",
        "func": "if (!msg) {\n    return null;\n}\nconst SLACK_TOKEN = env.get(\"SLACK_TOKEN\");\nconst CHANNEL_ID = \"C04N3ULSX9R\";\nconst data = msg.payload;\nlet dtime = data.dtime;\nvar options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\ndtime = dtime.toLocaleDateString(undefined, options)\nlet device_type = \"Air Condition Power Consumption (W)\";\nlet aggregation_type = \"Daily Summary\";\nlet aggregation = data.sum.toLocaleString();\nlet curr_device = data.curr_device;\nlet blocks = [\n    {\n        \"type\": \"section\",\n        \"text\": {\n            \"text\": `*${device_type}*`,\n            \"type\": \"mrkdwn\"\n        },\n        \"fields\": [\n            {\n                \"type\": \"mrkdwn\",\n                \"text\": `Device: ${curr_device}\\nDate: ${dtime}\\n${aggregation_type}: ${aggregation}\\n\\n`\n            }\n        ]\n    }\n]\nmsg.headers = {\n    \"Authorization\": `Bearer ${SLACK_TOKEN}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n};\nmsg.payload = {\n    \"channel\": CHANNEL_ID,\n    \"blocks\": blocks\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 380,
        "wires": [
            [
                "6e7ee24a1357333b"
            ]
        ]
    },
    {
        "id": "c43bb5d3a60b4e90",
        "type": "mqtt in",
        "z": "3daf70b601a8f1f4",
        "name": "MiAC*",
        "topic": "/home/15min/MiAC/#",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fe78548ad9d34539",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 280,
        "wires": [
            [
                "fb4161676ef00167"
            ]
        ]
    },
    {
        "id": "36e5f03c8ccf4048",
        "type": "debug",
        "z": "3daf70b601a8f1f4",
        "name": "parsed payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 180,
        "wires": []
    },
    {
        "id": "fb4161676ef00167",
        "type": "function",
        "z": "3daf70b601a8f1f4",
        "name": "parse data",
        "func": "const items = msg.payload.split(\"|\");\nconst date = new Date(items[0]);\nconst value = parseInt(items[1]);\nconst device = msg.topic.split(\"/\")[4];\nconst startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\nconst startOfYesterday = new Date();\nstartOfYesterday.setDate(startOfYesterday.getDate()-1)\nstartOfYesterday.setHours(0, 0, 0, 0);\nmsg.payload={\"dtime\":date,\n    \"device\":device,\n    \"reading\":value,\n    \"startOfDay\":startOfDay,\n    \"startOfYesterday\":startOfYesterday}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 280,
        "wires": [
            [
                "36e5f03c8ccf4048",
                "509185d79c05bb0e"
            ]
        ]
    },
    {
        "id": "7177473a4a169f86",
        "type": "function",
        "z": "3daf70b601a8f1f4",
        "name": "insert raw data",
        "func": "const data = msg.payload;\nmsg.payload = [data.dtime, data.device, data.reading];\nglobal.set('last_miac', data.reading);\nmsg.topic = \"INSERT INTO MiAC(dtime, device, reading) VALUES ( ?, ?, ?);\" ;\nlet last_reading = global.get('last_reading');\nlast_reading[data.device] = data.reading;\nglobal.set('last_reading', last_reading);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 200,
        "wires": [
            [
                "46fde5450ee7a0ac"
            ]
        ]
    },
    {
        "id": "46fde5450ee7a0ac",
        "type": "mysql",
        "z": "3daf70b601a8f1f4",
        "mydb": "28bf60a032e41c72",
        "name": "db",
        "x": 890,
        "y": 180,
        "wires": [
            [
                "f938333ec17b4cc1"
            ]
        ]
    },
    {
        "id": "f938333ec17b4cc1",
        "type": "debug",
        "z": "3daf70b601a8f1f4",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 120,
        "wires": []
    },
    {
        "id": "509185d79c05bb0e",
        "type": "switch",
        "z": "3daf70b601a8f1f4",
        "name": "check if late",
        "property": "payload.dtime",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "payload.startOfDay",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "payload.startOfYesterday",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 450,
        "y": 480,
        "wires": [
            [
                "7177473a4a169f86",
                "e9f1f0dc02febb9c"
            ],
            [
                "adf5b55563adcb87"
            ],
            [
                "077ff1c349b6d5b9"
            ]
        ],
        "outputLabels": [
            "not late",
            "late agg",
            "too late"
        ]
    },
    {
        "id": "adf5b55563adcb87",
        "type": "debug",
        "z": "3daf70b601a8f1f4",
        "name": "late agg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 600,
        "wires": []
    },
    {
        "id": "077ff1c349b6d5b9",
        "type": "debug",
        "z": "3daf70b601a8f1f4",
        "name": "too late",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 660,
        "wires": []
    },
    {
        "id": "e9f1f0dc02febb9c",
        "type": "function",
        "z": "3daf70b601a8f1f4",
        "name": "aggregation",
        "func": "const data = msg.payload;\nconst curr_device = data.device;\nif (!context.miac[curr_device]) {\n    const date = data.dtime;\n    date.setHours(0,0,0,0);\n    context.miac[curr_device] = {\n        \"dtime\": date,\n        \"sum\": 0\n    };\n}\n\nif (context.miac[curr_device].dtime.getDate() != data.dtime.getDate()) {\n    msg.payload = {};\n    msg.payload.dtime = context.miac[curr_device].dtime;\n    msg.payload.curr_device = curr_device;\n    msg.payload.sum = context.miac[curr_device].sum;\n    msg.topic = \"INSERT INTO MIACSumDay(dtime, device, day_sum) VALUES(:dtime, :curr_device, :sum);\";\n    global.set(\"last_miac_sum\", global.get(\"last_miac_sum\") + context.miac[curr_device].sum);\n    const date = data.dtime;\n    date.setHours(0, 0, 0, 0);\n    context.miac[curr_device].dtime = date;\n    context.miac[curr_device].sum = data.reading;\n    return msg;\n}\n\ncontext.miac[curr_device].sum += data.reading;\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.miac = {};",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 400,
        "wires": [
            [
                "46fde5450ee7a0ac",
                "3e5cd37c65d88bc1"
            ]
        ]
    },
    {
        "id": "adbd19b6c0cb5e36",
        "type": "http request",
        "z": "3daf70b601a8f1f4",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://slack.com/api/chat.postMessage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1150,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "3e5cd37c65d88bc1",
        "type": "function",
        "z": "3daf70b601a8f1f4",
        "name": "prepare request",
        "func": "if (!msg) {\n    return null;\n}\nconst SLACK_TOKEN = env.get(\"SLACK_TOKEN\");\nconst CHANNEL_ID = \"C04N3ULSX9R\";\nconst data = msg.payload;\nlet dtime = data.dtime;\nvar options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\ndtime = dtime.toLocaleDateString(undefined, options)\nlet device_type = \"Miscellaneous Power Consumption (W)\"\nlet aggregation_type = \"Daily Summary\";\nlet aggregation = data.sum.toLocaleString();\nlet curr_device = data.curr_device;\nlet blocks = [\n    {\n        \"type\": \"section\",\n        \"text\": {\n            \"text\": `*${device_type}*`,\n            \"type\": \"mrkdwn\"\n        },\n        \"fields\": [\n            {\n                \"type\": \"mrkdwn\",\n                \"text\": `Device: ${curr_device}\\nDate: ${dtime}\\n${aggregation_type}: ${aggregation}\\n\\n`\n            }\n        ]\n    }\n]\nmsg.headers = {\n    \"Authorization\": `Bearer ${SLACK_TOKEN}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n};\nmsg.payload = {\n    \"channel\": CHANNEL_ID,\n    \"blocks\": blocks\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 400,
        "wires": [
            [
                "adbd19b6c0cb5e36"
            ]
        ]
    },
    {
        "id": "f3272a5e1ec794f5",
        "type": "mqtt in",
        "z": "b2ec95917b31b4c9",
        "name": "Water*",
        "topic": "/home/15min/W/#",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fe78548ad9d34539",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 240,
        "wires": [
            [
                "7fbd343541472e82"
            ]
        ]
    },
    {
        "id": "79eb3556fe9da782",
        "type": "debug",
        "z": "b2ec95917b31b4c9",
        "name": "parsed payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 140,
        "wires": []
    },
    {
        "id": "048ce6f7f35a53d5",
        "type": "function",
        "z": "b2ec95917b31b4c9",
        "name": "insert raw data",
        "func": "const data = msg.payload;\nmsg.payload = [data.dtime, data.device, data.reading];\nmsg.topic = \"INSERT INTO Water(dtime, device, reading) VALUES ( ?, ?, ?);\" ;\nlet last_reading = global.get('last_reading');\nlast_reading[data.device] = data.reading;\nglobal.set('last_reading', last_reading);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 160,
        "wires": [
            [
                "73302ae258b5dd28"
            ]
        ]
    },
    {
        "id": "73302ae258b5dd28",
        "type": "mysql",
        "z": "b2ec95917b31b4c9",
        "mydb": "28bf60a032e41c72",
        "name": "db",
        "x": 950,
        "y": 140,
        "wires": [
            [
                "ecc8e6b9ff036237"
            ]
        ]
    },
    {
        "id": "ecc8e6b9ff036237",
        "type": "debug",
        "z": "b2ec95917b31b4c9",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 80,
        "wires": []
    },
    {
        "id": "5d74be77370eef3a",
        "type": "switch",
        "z": "b2ec95917b31b4c9",
        "name": "check if late",
        "property": "payload.dtime",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "payload.startOfDay",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "payload.startOfYesterday",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 490,
        "y": 440,
        "wires": [
            [
                "048ce6f7f35a53d5",
                "125356d0376578f5"
            ],
            [
                "270ff3c8df53d7c5"
            ],
            [
                "42510acc1e93e205"
            ]
        ],
        "outputLabels": [
            "not late",
            "late agg",
            "too late"
        ]
    },
    {
        "id": "270ff3c8df53d7c5",
        "type": "function",
        "z": "b2ec95917b31b4c9",
        "name": "late aggregation",
        "func": "const data = msg.payload;\nconst curr_device = data.device;\nif (!global.yesterdayWater[curr_device]) {\n    const date = data.startOfYesterday;\n    global.yesterdayWater[curr_device] = {\n        \"dtime\": date,\n        \"sum\": 0.0\n    };\n}\n\nglobal.yesterdayWater[curr_device].sum += data.reading;\nmsg.payload = {};\nmsg.payload.dtime = data.dtime;\nmsg.payload.device = data.device;\nmsg.payload.reading = data.reading;\nmsg.payload.sum_dtime = global.yesterdayWater[curr_device].dtime;\nmsg.payload.sum = global.yesterdayWater[curr_device].sum;\nmsg.payload.arrival_status = 'late';\nmsg.topic = \"INSERT INTO Water(dtime, device, reading, arrival_status) VALUES ( :dtime, :device, :reading, :arrival_status); \" +\n    \"INSERT INTO WaterSumDay(dtime, device, day_sum) VALUES(:sum_dtime, :device, :sum) ON DUPLICATE KEY UPDATE day_sum = :sum ;\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nif (!global.yesterdayWater) {\n    global.yesterdayWater = {};\n}",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 480,
        "wires": [
            [
                "73302ae258b5dd28"
            ]
        ]
    },
    {
        "id": "42510acc1e93e205",
        "type": "function",
        "z": "b2ec95917b31b4c9",
        "name": "insert rejected",
        "func": "const data = msg.payload;\n\nmsg.payload = {};\nmsg.payload.dtime = data.dtime;\nmsg.payload.device = data.device;\nmsg.payload.reading = data.reading;\nmsg.payload.arrival_status = 'rejected';\nmsg.payload.dtime_received = data.startOfDay;\nmsg.topic = \"INSERT INTO Water(dtime, device, reading, arrival_status) VALUES ( :dtime, :device, :reading, :arrival_status); \" +\n\"INSERT INTO RejectedEvents(dtime_event, dtime_received, device, reading) VALUES (:dtime, :dtime_received, :device, :reading)\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 762,
        "y": 629,
        "wires": [
            [
                "73302ae258b5dd28"
            ]
        ]
    },
    {
        "id": "7fbd343541472e82",
        "type": "function",
        "z": "b2ec95917b31b4c9",
        "name": "parse data",
        "func": "const items = msg.payload.split(\"|\");\nconst date = new Date(items[0]);\nconst value = parseFloat(items[1]);\nconst device = msg.topic.split(\"/\")[4];\nif (date > context.get(\"startOfDay\")) {\n    const temp_date = new Date(date.getFullYear(),\n        date.getMonth(),\n        date.getDate(),);\n    context.set(\"startOfDay\", temp_date); \n}\n// const startOfDay = new Date();\nconst startOfDay = new Date(context.get(\"startOfDay\"));\n// startOfDay.setHours(0, 0, 0, 0);\n// const startOfYesterday = new Date();\nconst startOfYesterday = new Date(context.get(\"startOfDay\"));\nstartOfYesterday.setDate(startOfYesterday.getDate()-1)\n// startOfYesterday.setHours(0, 0, 0, 0);\nmsg.payload={\"dtime\":date,\n    \"device\":device,\n    \"reading\":value,\n    \"startOfDay\":startOfDay,\n    \"startOfYesterday\":startOfYesterday}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nconst date = new Date();\ndate.setHours(0,0,0,0);\ncontext.set(\"startOfDay\", date);",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 260,
        "wires": [
            [
                "79eb3556fe9da782",
                "5d74be77370eef3a"
            ]
        ]
    },
    {
        "id": "125356d0376578f5",
        "type": "function",
        "z": "b2ec95917b31b4c9",
        "name": "aggregation",
        "func": "const data = msg.payload;\nconst curr_device = data.device;\n\nif (!context.water[curr_device]) {\n    const date = new Date(data.dtime.getTime());\n    date.setHours(0, 0, 0, 0);\n    context.water[curr_device] = {\n        \"dtime\": date,\n        \"sum\": 0.0\n    };\n}\n\nif (context.water[curr_device].dtime.getDate() != data.dtime.getDate()) {\n    msg.payload = {};\n    msg.payload.dtime = context.water[curr_device].dtime;\n    msg.payload.curr_device = curr_device;\n    msg.payload.sum = context.water[curr_device].sum;\n    msg.topic = \"INSERT INTO WaterSumDay(dtime, device, day_sum) VALUES(:dtime, :curr_device, :sum);\";\n    global.set(\"last_w_sum\", global.get(\"last_w_sum\") + context.water[curr_device].sum);\n    global.yesterdayWater[curr_device] = { ...context.water[curr_device] };\n    const date = data.dtime;\n    date.setHours(0, 0, 0, 0);\n    context.water[curr_device].dtime = new Date(date.getTime());\n    context.water[curr_device].sum = data.reading;\n    return msg;\n}\n\ncontext.water[curr_device].sum += data.reading;\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.water = {};\nif (!global.yesterdayWater) {\n    global.yesterdayWater = {};\n}",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 380,
        "wires": [
            [
                "73302ae258b5dd28",
                "20f9f813dddd48c0"
            ]
        ]
    },
    {
        "id": "514780acc889cf79",
        "type": "http request",
        "z": "b2ec95917b31b4c9",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://slack.com/api/chat.postMessage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1210,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "20f9f813dddd48c0",
        "type": "function",
        "z": "b2ec95917b31b4c9",
        "name": "prepare request",
        "func": "if (!msg) {\n    return null;\n}\nconst SLACK_TOKEN = env.get(\"SLACK_TOKEN\");\nconst CHANNEL_ID = \"C04N3ULSX9R\";\nconst data = msg.payload;\nlet dtime = data.dtime;\nvar options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\ndtime = dtime.toLocaleDateString(undefined, options)\nlet device_type = \"Water Consumption (lt)\";\nlet aggregation_type = \"Daily Summary\";\nlet aggregation = data.sum.toFixed(2).toLocaleString();\nlet curr_device = data.curr_device;\nlet blocks = [\n    {\n        \"type\": \"section\",\n        \"text\": {\n            \"text\": `*${device_type}*`,\n            \"type\": \"mrkdwn\"\n        },\n        \"fields\": [\n            {\n                \"type\": \"mrkdwn\",\n                \"text\": `Device: ${curr_device}\\nDate: ${dtime}\\n${aggregation_type}: ${aggregation}\\n\\n`\n            }\n        ]\n    }\n]\nmsg.headers = {\n    \"Authorization\": `Bearer ${SLACK_TOKEN}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n};\nmsg.payload = {\n    \"channel\": CHANNEL_ID,\n    \"blocks\": blocks\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 380,
        "wires": [
            [
                "514780acc889cf79"
            ]
        ]
    },
    {
        "id": "4fc5527e0b2ba4dd",
        "type": "mqtt in",
        "z": "f90b855aadc86ac8",
        "name": "Movement*",
        "topic": "/home/movement/#",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fe78548ad9d34539",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 240,
        "wires": [
            [
                "1e74cdaad0e3ef8e"
            ]
        ]
    },
    {
        "id": "b0471e95896c9399",
        "type": "debug",
        "z": "f90b855aadc86ac8",
        "name": "parsed payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 140,
        "wires": []
    },
    {
        "id": "1e74cdaad0e3ef8e",
        "type": "function",
        "z": "f90b855aadc86ac8",
        "name": "parse data",
        "func": "const items = msg.payload.split(\"|\");\nconst date = new Date(items[0]);\nconst device = msg.topic.split(\"/\")[3];\nconst startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\nconst startOfYesterday = new Date();\nstartOfYesterday.setDate(startOfYesterday.getDate()-1)\nstartOfYesterday.setHours(0, 0, 0, 0);\nmsg.payload={\"dtime\":date,\n    \"device\":device,\n    \"startOfDay\":startOfDay,\n    \"startOfYesterday\":startOfYesterday}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 240,
        "wires": [
            [
                "b0471e95896c9399",
                "c91aa7f9b53b9d82"
            ]
        ]
    },
    {
        "id": "fcf3771546f42b1e",
        "type": "function",
        "z": "f90b855aadc86ac8",
        "name": "insert raw data",
        "func": "const data = msg.payload;\nmsg.payload = [data.dtime, data.device];\nmsg.topic = \"INSERT INTO Movement(dtime, device) VALUES ( ?, ?);\" ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 160,
        "wires": [
            [
                "520ef80cf7e3da6b"
            ]
        ]
    },
    {
        "id": "520ef80cf7e3da6b",
        "type": "mysql",
        "z": "f90b855aadc86ac8",
        "mydb": "28bf60a032e41c72",
        "name": "db",
        "x": 910,
        "y": 140,
        "wires": [
            [
                "4da75f2232bc0c8a"
            ]
        ]
    },
    {
        "id": "4da75f2232bc0c8a",
        "type": "debug",
        "z": "f90b855aadc86ac8",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 80,
        "wires": []
    },
    {
        "id": "c91aa7f9b53b9d82",
        "type": "switch",
        "z": "f90b855aadc86ac8",
        "name": "check if late",
        "property": "payload.dtime",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "payload.startOfDay",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "payload.startOfYesterday",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 470,
        "y": 440,
        "wires": [
            [
                "fcf3771546f42b1e",
                "ecd8b8e2a22edd27",
                "20cec521e7079ef2"
            ],
            [
                "ab52e620606f7ee4"
            ],
            [
                "409772fd4a8b4b73"
            ]
        ],
        "outputLabels": [
            "not late",
            "late agg",
            "too late"
        ]
    },
    {
        "id": "ab52e620606f7ee4",
        "type": "debug",
        "z": "f90b855aadc86ac8",
        "name": "late agg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 560,
        "wires": []
    },
    {
        "id": "409772fd4a8b4b73",
        "type": "debug",
        "z": "f90b855aadc86ac8",
        "name": "too late",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 620,
        "wires": []
    },
    {
        "id": "ecd8b8e2a22edd27",
        "type": "function",
        "z": "f90b855aadc86ac8",
        "name": "trigger_alarm",
        "func": "const data = msg.payload;\n\nfunction is_night_time(dtime) {\n    const date = new Date(dtime);\n    const hour = date.getHours();\n    const minutes = date.getMinutes();\n    return (hour >= 2 && (hour <=5 || (hour == 6 && minutes == 0)));\n}\n\ndata.alarmTrigger = ''\nif (global.get('last_miac') < 100) {\n    data.alarmTrigger = 'Energy';\n}\nif (is_night_time(data.dtime)) {\n    if (data.alarmTrigger == '') {\n        data.alarmTrigger = 'Time';\n    }\n    else {\n        data.alarmTrigger += ' Time';\n    }\n}\nelse if (data.alarmTrigger == ''){\n    return null\n}\n\nmsg.payload = {};\nmsg.payload.dtime = data.dtime;\nmsg.payload.alarmTrigger = data.alarmTrigger;\nmsg.topic = \"INSERT INTO Alarms(dtime, alarm_trigger) VALUES (:dtime, :alarmTrigger);\";\n//\"trigger\" is a reserved word\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 260,
        "wires": [
            [
                "520ef80cf7e3da6b",
                "dcfdcd748eb08482",
                "a87f5a3c89b29cb0"
            ]
        ]
    },
    {
        "id": "20cec521e7079ef2",
        "type": "function",
        "z": "f90b855aadc86ac8",
        "name": "aggregation",
        "func": "const data = msg.payload;\nconst curr_device = data.device;\n\nif (!context.mv[curr_device]) {\n    const date = data.dtime;\n    date.setHours(0,0,0,0);\n    context.mv[curr_device] = {\n        \"dtime\": date,\n        \"sum\": 0\n    };\n}\n\nif (context.mv[curr_device].dtime.getDate() != data.dtime.getDate()) {\n    msg.payload = [context.mv[curr_device].dtime, curr_device, context.mv[curr_device].sum];\n    msg.topic = \"INSERT INTO MovementSumDay(dtime, device, day_count) VALUES(?, ?, ?);\";\n    const date = data.dtime;\n    date.setHours(0, 0, 0, 0);\n    context.mv[curr_device].dtime = date;\n    context.mv[curr_device].sum = 0;\n    return msg;\n}\n\ncontext.mv[curr_device].sum++;\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.mv = {};",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 380,
        "wires": [
            [
                "520ef80cf7e3da6b"
            ]
        ]
    },
    {
        "id": "dcfdcd748eb08482",
        "type": "debug",
        "z": "f90b855aadc86ac8",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 360,
        "wires": []
    },
    {
        "id": "a87f5a3c89b29cb0",
        "type": "function",
        "z": "f90b855aadc86ac8",
        "name": "prepare request",
        "func": "const SLACK_TOKEN  = env.get(\"SLACK_TOKEN\");\nconst CHANNEL_ID = \"C04DG8G7M4N\";\nconst data = msg.payload;\nlet dtime = data.dtime;\nvar options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' , hour: '2-digit', minute: '2-digit'};\ndtime = dtime.toLocaleDateString(undefined, options)\nlet alarm_trigger = data.alarmTrigger;\nlet blocks = [\n    {\n        \"type\": \"section\",\n        \"text\": {\n            \"text\": `*Alarm Triggered ${dtime}*`,\n            \"type\": \"mrkdwn\"\n        },\n        \"fields\": [\n            {\n                \"type\": \"mrkdwn\",\n                \"text\": `Trigger: ${alarm_trigger}\\n\\n`\n        }\n        ]\n    }]\nmsg.headers = {\n    \"Authorization\": `Bearer ${SLACK_TOKEN}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n};\nmsg.payload = {\n    \"channel\": CHANNEL_ID,\n    \"blocks\": blocks\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 240,
        "wires": [
            [
                "55f8a6dcd8f94dc7"
            ]
        ]
    },
    {
        "id": "234a2415fa76b813",
        "type": "debug",
        "z": "f90b855aadc86ac8",
        "name": "debug 21",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 440,
        "wires": []
    },
    {
        "id": "55f8a6dcd8f94dc7",
        "type": "http request",
        "z": "f90b855aadc86ac8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://slack.com/api/chat.postMessage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1210,
        "y": 240,
        "wires": [
            [
                "234a2415fa76b813"
            ]
        ]
    },
    {
        "id": "e52a4d864e92056d",
        "type": "mqtt in",
        "z": "22cff19950bf15c7",
        "name": "Etot",
        "topic": "/home/day/Etot",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fe78548ad9d34539",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 240,
        "wires": [
            [
                "3d13e7ce243ec7b1"
            ]
        ]
    },
    {
        "id": "3fe8e8031e792493",
        "type": "debug",
        "z": "22cff19950bf15c7",
        "name": "parsed payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 140,
        "wires": []
    },
    {
        "id": "3d13e7ce243ec7b1",
        "type": "function",
        "z": "22cff19950bf15c7",
        "name": "parse data",
        "func": "const items = msg.payload.split(\"|\");\nconst date = new Date(items[0]);\nconst value = parseFloat(items[1]);\nconst device = msg.topic.split(\"/\")[4];\nconst startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\nconst startOfYesterday = new Date();\nstartOfYesterday.setDate(startOfYesterday.getDate()-1)\nstartOfYesterday.setHours(0, 0, 0, 0);\nmsg.payload={\"dtime\":date,\n    \"device\":device,\n    \"reading\":value,\n    \"startOfDay\":startOfDay,\n    \"startOfYesterday\":startOfYesterday}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 240,
        "wires": [
            [
                "3fe8e8031e792493",
                "2b3733b258cd1ecc"
            ]
        ]
    },
    {
        "id": "a7c9bdda05fbc297",
        "type": "function",
        "z": "22cff19950bf15c7",
        "name": "insert raw data",
        "func": "const data = msg.payload;\nmsg.payload = {};\nmsg.payload.dtime = data.dtime;\nmsg.payload.reading = data.reading;\nmsg.topic = \"INSERT INTO Etot(dtime, reading) VALUES ( :dtime, :reading);\" ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 160,
        "wires": [
            [
                "14c6b8cc9738e133"
            ]
        ]
    },
    {
        "id": "14c6b8cc9738e133",
        "type": "mysql",
        "z": "22cff19950bf15c7",
        "mydb": "28bf60a032e41c72",
        "name": "db",
        "x": 1010,
        "y": 140,
        "wires": [
            [
                "c71e5c2a1cfebdcf"
            ]
        ]
    },
    {
        "id": "c71e5c2a1cfebdcf",
        "type": "debug",
        "z": "22cff19950bf15c7",
        "name": "debug 16",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 80,
        "wires": []
    },
    {
        "id": "2b3733b258cd1ecc",
        "type": "switch",
        "z": "22cff19950bf15c7",
        "name": "check if late",
        "property": "payload.dtime",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "payload.startOfDay",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "payload.startOfYesterday",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 570,
        "y": 440,
        "wires": [
            [
                "a7c9bdda05fbc297",
                "20e10fc9d510b87f"
            ],
            [
                "bd5caca629b1cf36"
            ],
            [
                "8b2b81bc5e282b88"
            ]
        ],
        "outputLabels": [
            "not late",
            "late agg",
            "too late"
        ]
    },
    {
        "id": "bd5caca629b1cf36",
        "type": "debug",
        "z": "22cff19950bf15c7",
        "name": "late agg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 560,
        "wires": []
    },
    {
        "id": "8b2b81bc5e282b88",
        "type": "debug",
        "z": "22cff19950bf15c7",
        "name": "too late",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 620,
        "wires": []
    },
    {
        "id": "20e10fc9d510b87f",
        "type": "function",
        "z": "22cff19950bf15c7",
        "name": "calculate Etot day diff",
        "func": "if (!flow.get(\"previousEtot\")){\n    flow.set(\"previousEtot\", msg.payload.reading);\n    msg.payload.day_diff = msg.payload.reading;\n}else{\n    var diff = msg.payload.reading - flow.get(\"previousEtot\");\n    msg.payload.day_diff = diff;\n    flow.set(\"previousEtot\", msg.payload.reading);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"previousEtot\", 0)",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 440,
        "wires": [
            [
                "397e48faea7755c9",
                "75ad83c81d3c7ac9"
            ]
        ]
    },
    {
        "id": "397e48faea7755c9",
        "type": "function",
        "z": "22cff19950bf15c7",
        "name": "insert daydiff data",
        "func": "const data = msg.payload;\nmsg.payload = {};\nmsg.payload.dtime = data.dtime;\nmsg.payload.day_diff = data.day_diff;\nmsg.topic = \"INSERT INTO EtotDayDiff(dtime, day_diff) VALUES ( :dtime, :day_diff);\" ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 480,
        "wires": [
            [
                "b7eeb7f6ebd07668",
                "0e95c318fb3ac80b",
                "4746c444ed91881e"
            ]
        ]
    },
    {
        "id": "b7eeb7f6ebd07668",
        "type": "mysql",
        "z": "22cff19950bf15c7",
        "mydb": "28bf60a032e41c72",
        "name": "db",
        "x": 1390,
        "y": 380,
        "wires": [
            [
                "0e95c318fb3ac80b"
            ]
        ]
    },
    {
        "id": "0e95c318fb3ac80b",
        "type": "debug",
        "z": "22cff19950bf15c7",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 440,
        "wires": []
    },
    {
        "id": "ea759ebb6b159b06",
        "type": "function",
        "z": "22cff19950bf15c7",
        "name": "insert leak data",
        "func": "const data = msg.payload;\nvar day_diff = msg.payload.day_diff;\nconst rest = day_diff - global.get(\"last_hvac_sum\") - global.get(\"last_miac_sum\");\nmsg.payload = [data.dtime,rest];\nmsg.topic =  \"INSERT INTO ElecDayRest(dtime, leak_amount) VALUES ( ?, ?);\";\nglobal.set(\"last_hvac_sum\", 0);\nglobal.set(\"last_miac_sum\", 0);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set(\"last_hvac_sum\",0);\nglobal.set(\"last_miac_sum\",0);",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 580,
        "wires": [
            [
                "b7eeb7f6ebd07668",
                "0e95c318fb3ac80b"
            ]
        ]
    },
    {
        "id": "75ad83c81d3c7ac9",
        "type": "delay",
        "z": "22cff19950bf15c7",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1060,
        "y": 620,
        "wires": [
            [
                "ea759ebb6b159b06"
            ]
        ]
    },
    {
        "id": "571ca02453b9b62a",
        "type": "http request",
        "z": "22cff19950bf15c7",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://slack.com/api/chat.postMessage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1550,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "4746c444ed91881e",
        "type": "function",
        "z": "22cff19950bf15c7",
        "name": "prepare request",
        "func": "if (!msg) {\n    return null;\n}\nconst SLACK_TOKEN = env.get(\"SLACK_TOKEN\");\nconst CHANNEL_ID = \"C04N3ULSX9R\";\nconst data = msg.payload;\nlet dtime = data.dtime;\nvar options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\ndtime = dtime.toLocaleDateString(undefined, options)\nlet device_type = \"Total Daily Power Consumption (Wh)\";\nlet reading = data.day_diff.toLocaleString();\nlet blocks = [\n    {\n        \"type\": \"section\",\n        \"text\": {\n            \"text\": `*${device_type}*`,\n            \"type\": \"mrkdwn\"\n        },\n        \"fields\": [\n            {\n                \"type\": \"mrkdwn\",\n                \"text\": `Date: ${dtime}\\nTotal: ${reading}\\n\\n`\n            }\n        ]\n    }\n]\nmsg.headers = {\n    \"Authorization\": `Bearer ${SLACK_TOKEN}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n};\nmsg.payload = {\n    \"channel\": CHANNEL_ID,\n    \"blocks\": blocks\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 300,
        "wires": [
            [
                "571ca02453b9b62a"
            ]
        ]
    },
    {
        "id": "36c001fda4782345",
        "type": "mqtt in",
        "z": "41d53ab346bb4ea0",
        "name": "Wtot",
        "topic": "/home/day/Wtot",
        "qos": "2",
        "datatype": "utf8",
        "broker": "fe78548ad9d34539",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 300,
        "wires": [
            [
                "22a270772b4003f2"
            ]
        ]
    },
    {
        "id": "474b482cd2a70bbf",
        "type": "debug",
        "z": "41d53ab346bb4ea0",
        "name": "parsed payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 200,
        "wires": []
    },
    {
        "id": "22a270772b4003f2",
        "type": "function",
        "z": "41d53ab346bb4ea0",
        "name": "parse data",
        "func": "const items = msg.payload.split(\"|\");\nconst date = new Date(items[0]);\nconst value = parseFloat(items[1]);\nconst device = msg.topic.split(\"/\")[4];\nconst startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\nconst startOfYesterday = new Date();\nstartOfYesterday.setDate(startOfYesterday.getDate()-1)\nstartOfYesterday.setHours(0, 0, 0, 0);\nmsg.payload={\"dtime\":date,\n    \"device\":device,\n    \"reading\":value,\n    \"startOfDay\":startOfDay,\n    \"startOfYesterday\":startOfYesterday}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 300,
        "wires": [
            [
                "474b482cd2a70bbf",
                "cf9cb488f66e3a08"
            ]
        ]
    },
    {
        "id": "00bd5bf719032554",
        "type": "function",
        "z": "41d53ab346bb4ea0",
        "name": "insert raw data",
        "func": "const data = msg.payload;\nmsg.payload = [data.dtime, data.reading];\nmsg.topic = \"INSERT INTO Wtot(dtime, reading) VALUES ( ?, ?);\" ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 220,
        "wires": [
            [
                "a1b274422620d924"
            ]
        ]
    },
    {
        "id": "a1b274422620d924",
        "type": "mysql",
        "z": "41d53ab346bb4ea0",
        "mydb": "28bf60a032e41c72",
        "name": "db",
        "x": 1030,
        "y": 200,
        "wires": [
            [
                "7a06d501ff7a10fc"
            ]
        ]
    },
    {
        "id": "7a06d501ff7a10fc",
        "type": "debug",
        "z": "41d53ab346bb4ea0",
        "name": "debug 18",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 140,
        "wires": []
    },
    {
        "id": "cf9cb488f66e3a08",
        "type": "switch",
        "z": "41d53ab346bb4ea0",
        "name": "check if late",
        "property": "payload.dtime",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "payload.startOfDay",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "payload.startOfYesterday",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 590,
        "y": 500,
        "wires": [
            [
                "00bd5bf719032554",
                "f3f0b62f3202bb99"
            ],
            [
                "eaf0012049aae13a"
            ],
            [
                "3162075366c32ff4"
            ]
        ],
        "outputLabels": [
            "not late",
            "late agg",
            "too late"
        ]
    },
    {
        "id": "eaf0012049aae13a",
        "type": "debug",
        "z": "41d53ab346bb4ea0",
        "name": "late agg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 620,
        "wires": []
    },
    {
        "id": "3162075366c32ff4",
        "type": "debug",
        "z": "41d53ab346bb4ea0",
        "name": "too late",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 680,
        "wires": []
    },
    {
        "id": "f5aebc5949bd2492",
        "type": "debug",
        "z": "41d53ab346bb4ea0",
        "name": "todo: aggregate",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 360,
        "wires": []
    },
    {
        "id": "f3f0b62f3202bb99",
        "type": "function",
        "z": "41d53ab346bb4ea0",
        "name": "calculate Wtot day diff",
        "func": "if (!flow.get(\"previousWtot\")){\n    flow.set(\"previousWtot\", msg.payload.reading);\n    msg.payload.day_diff = msg.payload.reading;\n}else{\n    var diff=msg.payload.reading-flow.get(\"previousWtot\");\n    msg.payload.day_diff = diff;\n    flow.set(\"previousWtot\", msg.payload.reading);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"previousWtot\",0)",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 480,
        "wires": [
            [
                "65a020ac6b2f0cec",
                "158b500ae98713d5"
            ]
        ]
    },
    {
        "id": "65a020ac6b2f0cec",
        "type": "function",
        "z": "41d53ab346bb4ea0",
        "name": "insert daydiff data",
        "func": "const data = msg.payload;\nmsg.payload = [data.dtime, data.day_diff];\nmsg.payload = {};\nmsg.payload.dtime = data.dtime;\nmsg.payload.day_diff = data.day_diff\nmsg.topic = \"INSERT INTO WtotDayDiff(dtime, day_diff) VALUES ( :dtime, :day_diff);\" ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 520,
        "wires": [
            [
                "75b366131c387701",
                "f5aebc5949bd2492",
                "dc6ea06014606df9"
            ]
        ]
    },
    {
        "id": "75b366131c387701",
        "type": "mysql",
        "z": "41d53ab346bb4ea0",
        "mydb": "28bf60a032e41c72",
        "name": "db",
        "x": 1370,
        "y": 460,
        "wires": [
            [
                "c2a079d87ca5ed8a"
            ]
        ]
    },
    {
        "id": "c2a079d87ca5ed8a",
        "type": "debug",
        "z": "41d53ab346bb4ea0",
        "name": "debug 19",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 400,
        "wires": []
    },
    {
        "id": "158b500ae98713d5",
        "type": "delay",
        "z": "41d53ab346bb4ea0",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 640,
        "wires": [
            [
                "d0e365e8342f3c68"
            ]
        ]
    },
    {
        "id": "d0e365e8342f3c68",
        "type": "function",
        "z": "41d53ab346bb4ea0",
        "name": "insert leak data",
        "func": "const data = msg.payload;\nvar day_diff = msg.payload.day_diff;\nconst rest = day_diff - global.get(\"last_w_sum\");\nmsg.payload = [data.dtime,rest];\nmsg.topic =  \"INSERT INTO WaterDayRest(dtime, leak_amount) VALUES ( ?, ?);\";\nglobal.set(\"last_w_sum\", 0);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set(\"last_w_sum\", 0);",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 600,
        "wires": [
            [
                "75b366131c387701"
            ]
        ]
    },
    {
        "id": "1fc41127ce5ba3f6",
        "type": "http request",
        "z": "41d53ab346bb4ea0",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://slack.com/api/chat.postMessage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1450,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "dc6ea06014606df9",
        "type": "function",
        "z": "41d53ab346bb4ea0",
        "name": "prepare request",
        "func": "if (!msg) {\n    return null;\n}\nconst SLACK_TOKEN = env.get(\"SLACK_TOKEN\");\nconst CHANNEL_ID = \"C04N3ULSX9R\";\nconst data = msg.payload;\nlet dtime = data.dtime;\nvar options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\ndtime = dtime.toLocaleDateString(undefined, options)\nlet device_type = \"Total Water Consumption (lt)\";\nlet reading = data.day_diff.toLocaleString();\nlet blocks = [\n    {\n        \"type\": \"section\",\n        \"text\": {\n            \"text\": `*${device_type}*`,\n            \"type\": \"mrkdwn\"\n        },\n        \"fields\": [\n            {\n                \"type\": \"mrkdwn\",\n                \"text\": `Date: ${dtime}\\nTotal: ${reading}\\n\\n`\n            }\n        ]\n    }\n]\nmsg.headers = {\n    \"Authorization\": `Bearer ${SLACK_TOKEN}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n};\nmsg.payload = {\n    \"channel\": CHANNEL_ID,\n    \"blocks\": blocks\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 300,
        "wires": [
            [
                "1fc41127ce5ba3f6"
            ]
        ]
    },
    {
        "id": "233e26ec5e0eba41",
        "type": "http in",
        "z": "7732566edda24d93",
        "name": "last_reading http in",
        "url": "/last_reading",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "09a7882cc5c6e57b"
            ]
        ]
    },
    {
        "id": "09a7882cc5c6e57b",
        "type": "function",
        "z": "7732566edda24d93",
        "name": "sig_verification",
        "func": "const qs = global.get('qs');\nconst crypto = global.get('crypto');\nconst SLACK_SIGNING_SECRET = env.get(\"SIGNING_SECRET\");\nlet res_msg = msg;\nlet slackSignature = msg.req.headers['x-slack-signature'];\nlet requestBody = qs.stringify(msg.req.body, { format: 'RFC1738' });\nlet timestamp = msg.req.headers['x-slack-request-timestamp'];\n\nlet time = Math.floor(new Date().getTime()/1000);\n\nif (Math.abs(time-timestamp) > 300) {\n    res_msg.statusCode = 400;\n    return [null, res_msg];\n}\n\nlet sigBasestring = 'v0:' + timestamp + ':' + requestBody;\nlet expectedSig = 'v0=' +\n    crypto.createHmac('sha256', SLACK_SIGNING_SECRET)\n        .update(sigBasestring, 'utf8')\n        .digest('hex');\nif (!crypto.timingSafeEqual(\n    Buffer.from(expectedSig, 'utf8'),\n    Buffer.from(slackSignature, 'utf8'))) {\n        res_msg.statusCode = 400;\n        return [null, res_msg];\n    }\nres_msg.statusCode = 200;\nreturn [msg, res_msg];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 200,
        "wires": [
            [
                "40ba9d3e86051683"
            ],
            [
                "a85497206f3c410d"
            ]
        ]
    },
    {
        "id": "a85497206f3c410d",
        "type": "http response",
        "z": "7732566edda24d93",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 550,
        "y": 340,
        "wires": []
    },
    {
        "id": "a4bc5f3a4e87bd4a",
        "type": "http request",
        "z": "7732566edda24d93",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://slack.com/api/chat.postMessage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "40ba9d3e86051683",
        "type": "function",
        "z": "7732566edda24d93",
        "name": "last_reading",
        "func": "if (!msg) {\n    return null;\n}\n\nconst SLACK_TOKEN = env.get(\"SLACK_TOKEN\");\nlet data = msg.payload;\nlet channel_id = data.channel_id;\nlet user_name = data.user_name;\nlet text = data.text;\nmsg.headers = {\n    \"Authorization\": `Bearer ${SLACK_TOKEN}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n};\nif ((text.split(' ')).length != 1) {\n    msg.payload = {\n        \"channel\": channel_id,\n        \"text\": `${user_name}, you need to specify exactly one device which reading you want. For more info type '/last_reading -help'`\n    }\n    return msg;\n}\nif (text == \"-help\" || text == \"-h\") {\n    msg.payload = {\n        \"channel\": channel_id,\n        \"text\": `usage: /last_reading device\\t#Returns the last reading for the specidfied device\\n/last_reading -devices\\t#Returns the available devices\\n/last_reading -help\\t#Returns the usa cases of the command\\n/last_reading -h\\t#Same as /last_reading -help`\n    }\n    return msg;\n}\nlet last_reading = global.get('last_reading');\n\nif (text == \"-devices\") {\n    let devices = \"\";\n    for (let device in last_reading) {\n        devices += device + '\\n'\n    }\n    msg.payload = {\n        \"channel\": channel_id,\n        \"text\": `The available devices are:\\n${devices}`\n    }\n    return msg;\n}\n\nif (!(text in last_reading)) {\n    msg.payload = {\n        \"channel\": channel_id,\n        \"text\": `${text} is not a device. Use /last_reading -devices to see the available devices.`\n    }\n    return msg;\n}\nmsg.payload = {\n    \"channel\": channel_id,\n    \"text\": `The last reading for ${text} is ${last_reading[text]}`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set('last_reading', {\n    \"TH1\": 0,\n    \"TH2\": 0,\n    \"HVAC1\": 0,\n    \"HVAC2\": 0,\n    \"MiAC1\": 0,\n    \"MiAC2\": 0,\n    \"W1\": 0\n})",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 100,
        "wires": [
            [
                "a4bc5f3a4e87bd4a"
            ]
        ]
    }
]